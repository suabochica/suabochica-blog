#+TITLE: Por qué no React?
#+DESCRIPTION: Serie que recopila una descripción general de React
#+AUTHOR: Sergio Benítez
#+DATE:<2021-03-10 Wed> 
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

Con el propósito de abordar un panorama general sobre React, es momento de presentar los posibles problemas a los que se enfrete por haber elegido esta libreria.

En esta publicación se van a compartir las preocupaciones comunes que se han manifestado en React por parte de la comunidad de desarroladores. Uno de los principales puntos en contra era su licencia patentada. No obstante, con la liberación de la versión 16 de React, el proyecto ahora usa el estandár MIT con una licencia de código abierto. Este es un testimonio de la inicativa que tiene la comunidad que soporta React para ir mejorando el proyecto.

Por otra parte, la idea es identificar que algunas de las preocupaciones son validas y otras son simplemente conceptos erróneos o problemas que pueden mitigarse fácilmente.

* Preocupación 1: HTML y JSX difieren

Repasemos el contexto de como la sintáxis opcional JSX se compila en JavaScript:

#+begin_src javascript
<h1 color="red"> Heading here </h1>
// is equal to
React.createElement("h1", {color: "red"}, "Heading here");
#+end_src

Cabe resaltar que el uso de JSX es opcional, pero gracias a su similitud con HTML, y su legibilidad, ha sido fuertemente aceptada por la comunidad. El JavaScript pleno que corresponde a la última parte del ejemplo es lo que realmente se envía al navegador.

Ahora bien, la sintáxis JSX es 99% lo mismo a HTML pero difieren en cosas muy puntuales que son agrupadas en la siguiente tabla:

| HTML                 | JSX                      |
|----------------------+--------------------------|
| for                  | htmlFor                  |
| class                | className                |
| <style color="blue"> | <style={{color:'blue'}}> |
| <!-- Comment -->     | {/* Comment */}          |

Como se puede observar, aprender estás diferencias es trivial, ya que la lista de diferencias es muy corta y fácil de asimilar.

Una preocupación frecuente con los primeros pasos que se dan en React es cuando los proyectos cuentan con un buen número de archivos HTML, ya que eso significaría que se deben convertir muchos archivos al formato JSX. Actualemente, React ofrece las siguientes formas para manejar esta transición:

- Usar la función buscar y reemplazar del editor
- Usar un compilador en línea
- Usar el paquete ~htmltojsx~ en npm

La elección es parte del desarrollador, pero en últimas si es necesario hacer la conversión a JSX lo cual en definitiva es una molestía.
  
* Preocupación 2: Paso de construcción es requerido

Esta preocupación esta muy relacionada con la anterior, ya que como se menciono antes, para al usar la sintáxis JSX React requiere de un paso de construcción que compile el JSX en llamados JavaScript planos que el navegador pueda comprender.

En la práctica esto es trivial para el desarrollo de las aplicaciones web modernas, ya que exigen un paso de construcción para ejecutar tareas de minificación y unificación de archivos que reduzcan el uso de ancho de banda. Tareas de traspilación para que el código que use las funcionalidades modernas de JavaScript pueda ser interpretado en la mayoría de los navegadores, y por último, aplicar linters y correr pruebas automatizadas sobre el código de la aplicación web.

En consecuencia, compilar el código JSX es una labor que se puede realizar de manera automática en este paso de construcción. Por otra parte, los traspiladores más famosos como los son, Babel y TypeScript, están en campacidad de compilar la sintáxis JSX por nosotros.

Por último, el paquete Create React App es un generador de proyectos que le ahorra al desarrollador todos los pasos de configuración necesarios para crear una aplicación web moderna con tan solo correr un comando. Al correr este comando accedemos a un paso de construcción por defecto que administra varias tareas, entre ellas la compilación automática de JSX.

* Preocupación 3: Conflictos entre versiones
* Preocupación 4: Recursos desactualizados
* Preocupación 5: Fatiga de toma de deciciones
* Resumen
