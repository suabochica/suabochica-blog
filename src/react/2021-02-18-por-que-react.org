#+TITLE: ¿Por qué usar React?
#+DESCRIPTION: Serie que recopila una descripción general de React
#+AUTHOR: Sergio Benítez
#+DATE:<2021-02-18 Thu> 
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

Esta serie estará dividida por tres publicaciones:

1. Por qué usar React?
2. Compesasiones de usar React (Trade offs)
3. Por qué /no/ usar React?

El objetivo de esta serie es evaluar el panorama que ofrece React como herramienta para el desarrollo de aplicaciones web.

* Historia
  A continuación se muestra una línea de tiempo con la historia de React:
  
  #+CAPTION: React History
  [[../images/react/01-react-big-pic-history.png]]

  React ya lleva casi una década en el mercado y quizas el hecho más importante en su historia fue su liberación a código abierto, ya que este evento marco la pauta para un crecimiento en la comunidad que se vío reflejado en la implementación de los nuevos complementos como React Native y los nuevos features como React Hooks. Esta misma comunidad liderada por el equipo dedicado de Facebook esta en constante actividad para actualizar documentación y desarrollar mejoras sobre la librería.

* Por qué React?

  Una de las principales dudas a resolver en esta serie es identificar el por qué usar React ante tantas alternativas que hay actualmente para el desarrollo de aplicaciones web. Le respuesta en detalle será desarrollada a lo largo de estás publicaciones. No obstante, se pueden anticipar seis razones importantes que soportan la elección de React:

  1. Flexibilidad
  2. Experiencia de desarrolladores
  3. Inversión y compromiso corporativo
  4. Soporte de la comunidad
  5. Rendimiento
  6. Fácil de probar

* Razón 1: Flexibilidad
  Quizas la razón más convincente para seleccionar React es que una vez se aprende, se esta en capacidad de construir interfaces de usuario para una gran variedad de plataformas y casos de uso. React es notablemente flexible, ya que incorpora menos opciones que sus competidores. React es una librería, no un framework. Al ser una librería resulta ser una herramienta más flexible, ya que se adapta a diferentes contextos.

  Cuando React fue creado, solo había un único caso de uso a solucioanr; la creación de componentes para aplicaciones web. Sin embargo, a medida de que su popularidad fue creciendo, su ecosistema se fue ampliando para abordar otros casos de usos como los que se enlistan a continuación:

  - Sitios estáticos a tráves de Gatsby
  - Desarrollo de aplicaciones móviles a través de React Native
  - Desarrollo de aplicaciones de escritorio con ayuda de Electron
  - Proyectos server-rendered a través del framework NextJS
  - Desarrollo de aplicaciones en realidad virtual a través de React VR

En resumen, la gran ventaja de react es:

#+begin_notes
Aprende React una vez, y escríbelo en todas parte.
#+end_notes

React es muy vérsatil ya que el motor de renderizado esta separado de React. Para hacer aplicaciones web, es necesario el uso de `react-dom` para renderizar los componentes HMTL. Para React Native, se usa el motor `react-native` para renderizar los componentes móviles. El mismo enfoque se tiene con React VR.

Actualmente, hay mas de una docena de motores de renderizado para React: generación de PDFs, implementaciones sobre canvas y componentes en WebGL.

En cuanto a server-side rendering, el motor ~react-dom~ provee una función llamada ~renderToString~ que renderiza el componente a una cadena de carácteres de HTML. Este hecho resulta útil cuando se pretende renderizar los componentes de React en el servidor, lo cual significa que se puede usar React para reemplazar una tecnología tradicional para la renderización en servidores. Librerías como NextJS nos facilitan este tipo de tareas.

Ahora bien, ya que React es tan ligero y flexible, uno de sus principales usos es integrarlo en aplicaciones existentes. De hecho, esta es la razón principal para la cuál React fue diseñado. Facebook usó React para reemplazar lentamente su aplicación renderizada en el servidor implementada en PHP. Se puede empezar por porciones pequeñas de una página web, como la calificación en estrellas de un curso web y posteriormente extenderse a piezas más grandes como un bloque que aglomera toda la información de un curso web; título, duración, nivel, fecha de publicación y calificación. Este enfoque se puede aplicar hasta lograr finalmente la reconstrucción de toda la página, logrando así una migración de bajo riesgo.

Por útlimo, React es soportado por la mayoría de los navegadores modernos. En consecuencia, se puede confiar en que su uso no implicaría configuraciones adicionales para poder ser utilizado en un cliente específico.
