#+TITLE: Componentes React básicos renderizados en el servidor
#+DESCRIPTION: Serie para explicar el concepto de server rendering con React
#+AUTHOR: Sergio Benítez
#+DATE:<2021-08-07 Sat>
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

Antes de comenzar a indagar sobre la renderización de comopnentes React en el servidor es acertado hacer un comporativo entre como se renderizan los componentes React tanto en el cliente como en el servidor.

* Comparación entre renderizacion en el cliente vs. el servidor

La siguiente tabla agrupa las diferenecias entre el contexto de renderización:

| Renderización en el servidor                                                    | Renderización en el cliente                                                                   |
|---------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------|
| Los componentes se envían como HTML puro y necesitan ser rehidratados           | Los componentes renderizados son completamente funcionales                                    |
| Las peticiones AJAX son de servidor a servidor (se esconden del cliente)        | Las peticiones AJAX son de cliente a servidor (visible para usuario técnicamente capacitados) |
| La mayoría del poder de procesamiento requerido es suministrada por el servidor | La mayoría del poder de procesamiento requerido es suministrada por el cliente                |

Como se puede observar, estas diferencias favorecen determinados contextos. Para tener una funcionalidad apropieada en componentes renderizados en el servidor es necesario aplicar un proceso de rehidratación. El manejo de peticiones AJAX y la distribución del poder de procesamiento también varía de acuerdo el enfoque.

* Flujo de trabajo de renderizado en el servidor

Para renderizar un componente React en el servidor se deben ejecutar los siguientes tres pasos:

1. Cargar el componente React y el estado de la aplicación en la memoria del servidor con ayuda de una declaración de importación.
2. Al tener el estado cargado, este ya puede ser utilizado para renderizar el componente en un string HTML.
3. Por último, el HTML generado es enviado al cliente.

* Renderizando un componente React en el servidor

Con el flujo de trabajo definido, estos son los siguientes pasos a tener en cuenta para poder cumplir el objetivo. Primero, se va a cargar el componente React en la aplicación Express y renderizar el string del componente en NodeJS. Segundo, se va a insertar el string renderizado en el archivo HTML. Por último, se va a enviar el HTML con un componente React no interactivo al cliente. Más adelante se le va a agregar la parte interactiva al componente. Al aplicar estas guías se podrá observar los efectos en rendimiento y experiencia de usuario. Tiempo de ir al código.

El primer cambio consiste en aislar el código del componente React en un archivo del método de renderización. Para ello, se crea un archivo ~client/App.jsx~ con el siguiente contenido.

#+begin_src jsx
// client/App.jsx
import React from 'react';

export const App = () => (
  <div>
    This is a React component!
  </div>
);
#+end_src

Hecha la modificación, se importa el componente React en el archivo ~client/client.jsx~ de la siguiente manera:
#+begin_src jsx
// client/client.jsx
import React from 'react';
import ReactDOM from 'react-dom';

import { App } from './App';

ReactDOM.render(<App/>, document.querySelector("#container"));
#+end_src

El último paso a nivel de cliente consiste en definir un token en el archivo ~public/index.html~ que debe coincidir con una convención establecida en el servidor. Para este caso el token definido es ~{{rendered}}~. En ese orden de ideas, el archivo mencionado tendrá la siguiente modificación:

#+begin_src html
<!-- public/index.html -->
<html>
  <body>
    <div id="container">
      {{rendered}}
    </div>
    <script src="client.js"></script>
  </body>
</html>
#+end_src

Establecidas las configuraciones en el cliente, es tiempo de consumirlas en el servidor. Primero, se hacen las importaciones del componente React y el método ~renderToString~ del paquete ~react-dom/server~. Segundo, dentro del cuerpo de la petición ~get~ se define una variable ~rendered~ que consumirá el componente React. Por último se envía al cliente el componente React renderizado como string. A continuación se muestran los cambios en ~server/index.js~ para lograr las descripciones hechas previamente.

#+begin_src js
// server/index.js
import React from "react";
import express from "express";
import { readFileSync } from "fs";
import { renderToString } from "react-dom/server";

import { App } from "../client/App";

const app = new express();

app.use(express.static("dist"));
app.get("/", async (_request, response) => {
  const index = readFileSync("public/index.html", "utf8");
  const rendered = renderToString(<App />);
  // response.send(`<h1>Express server is on...</h1>`);
  response.send(index.replace("{{rendered}}", rendered));
});

app.listen(7777);
console.log("Server is listening");
#+end_src

Al correr el servidor y abrir el navegador a nivel visual no se obtiene ningún cambio. No obstante, si se refresca la página, el tiempo de respuesta es más rápido en la carga de la página.

* Entendiendo los retos de la renderización desde el servidor

Es importantate explorar los retos que hacen a la renderización desde el servidor un enfoque con compensaciones y no un paquete de ventajas. Estos retos los podemos resumir en los siguientes cuatro puntos.

** La comunicación cliente, servidor sobre HTTP es diferente

Las comunicaciones externas de la aplicación, como por ejemplo la comunicación con un servidor API se hacen de servidor a servidor por medio de peticiones HTTP. Dentro del entorno de desarrollo web, el proceso más popular es que el cliente inicia la comunicación con los servidores a través de la tecnología AJAX y eventualmente el servidor envia la respuesta de dicha petición. Es importante tener en cuenta que las comunicaciones de cliente a servidor son menos seguras que la comunicaciones servidor a servidor.En el  manejo de seguridad en las peticiones se tienen unas librerías que sirven para AJAX y otras para HTTP. La recomendación para administrar temas de seguridad parte de un diseño cuidadoso de la aplicación y la selección de las librerías adecuadas.

** El código debe funcionar y ser probado tanto en el cliente como en el servidor

Al tener código que se esta ejecutando tanto en el cliente como en el servidor significa que tenemos cosas adicionales por probar. Si el código varía un poco entre el cliente y el servidor, toda la aplicación puede romperse por como la naturaleza de la renderización en el servidor, ya que el lenguaje de marcado que se genera del componente React debe ser exactamente el mismo (recordemos la condición de componentes puros). En conclusión el presupuesto de pruebas debe aumentarse.

** Se requiere de un proceso de desarrollo más sofisticado

No importa cual sea el método que se utilice para estructurar el proyecto, para tener a los desarrolladores con trabajos independientes, el proceso de desarrollo tiene que ser los suficientemente sofisticado para permitirles entornos de pruebas sobre las versiones del componente tanto en el servidor como en el cliente y confirmar que ambos funcionan. Por ejemplo, si se agrega una librería adicional al componente, es recomendable tener una especie de portal que permita ver cada uno de los componentes de manera individual. Con esta propuesta, se reduce la confusión de tratar de solucionar si un componente se esta renderizando correctamente en el cliente o si se presento alguna modificación relevante en la salida del servidor.

** Se esta expuesto a bugs inusuales

Toda esta conjución detrás de la renderización en el servidor, expone el proceso de desarrollo a una nueva clase de bugs. Es común que la aplicación pueda funcionar en determinado momento, solo para romperse en otra situación oscura. Quizás la renderización en el servidor funcione sobre cada página de la aplicación y el cliente muestre un fallo en un componente específico que se presenta cuando se actualiza la página. Este tipo de bugs son díciles de replicar y díficiles de solucionar.

Al final del día, como en muchos contextos en el mundo del desarrollo de software, es necesario tener presente que las ventajas que se quieren adquirir conllevan a identificar cuales son los retos por afrontar con el fin de llegar así a un punto de equilibrio.

* Agregando funcionalidad a la aplicación de encuestas

Las funcionalidades que se van a agregar a la aplicación que actualmente se encuentra en un estado de hola mundo son:

Primero se va a crear un estado por defecto para la aplicación para almacenar la colección de preguntas y la colección de respuestas.

Segundo, se va a crear un componente React que renderice el estado creado en el paso anterior. La responsabilidad de este componente es combinar las preguntas y las respuesta de la encuesta en un a sola lista jerárquica.

Por último, se renderizará el componente React en el servidor enviando el HTML respectivo al cliente para obtener un alto rendimiento, pero sin interacción. La parte interactiva de la renderización en el servidor se logra con rehidratación, un concepto que se indagará mas adelante.

Tiempo de aplicar al pie de la letra las instrucciones previas. Para ello, se edita el archivo ~/server/index.js/~ como se muestra a continuación:

#+begin_src js
// server/index.js
import React from "react";
import express from "express";
import { readFileSync } from "fs";
import { renderToString } from "react-dom/server";

import { App } from "../client/App";

const app = new express();
const data = {
  questions: [
    {
      questionId: "Q1",
      content: "Which back end solution should we use for our application?",
    },
    {
      questionId: "Q2",
      content:
        "What percentage of developer time should be devoted to end-to-end testing?",
    },
  ],
  answers: [
    {
      answerId: "A1",
      questionId: 1,
      upvotes: 2,
      content: "Apache",
    },
    {
      answerId: "A2",
      questionId: "Q1",
      upvotes: 0,
      content: "Java",
    },
    {
      answerId: "A3",
      questionId: "Q1",
      upvotes: 4,
      content: "Node.js",
    },
    {
      answerId: "A4",
      questionId: "Q2",
      upvotes: 2,
      content: "25%",
    },
    {
      answerId: "A5",
      questionId: "Q2",
      upvotes: 1,
      content: "50%",
    },
    {
      answerId: "A6",
      questionId: "Q2",
      upvotes: 1,
      content: "75%",
    },
  ],
};

app.use(express.static("dist"));
app.get("/", async (_request, response) => {
  const index = readFileSync("public/index.html", "utf8");
  const rendered = renderToString(<App {...data} />);
  // response.send(`<h1>Express server is on...</h1>`);
  response.send(index.replace("{{rendered}}", rendered));
});

app.listen(7777);
console.log("Server is listening");
#+end_src

El primer cambio importante es la variable ~data~, que representa el estado de la aplicación, con las dos propiedades ~questions~ y ~answers~. El segundo cambio relevante es que la variable ~data~ se pasa como una propiedad del componente ~<App>~. Esto significa que ahora se puede consumir las información de la variable ~data~ en el componente React. En ese orden de ideas, se prosiguen con las siguientes actualizaciones en el archivo ~client/App.jsx~

#+begin_src jsx
// client/App.jsx
import React from 'react';

export const App = ({questions, answers}) => (
  <div>
    <h1>Q&A Tool</h1>
    {questions.map(({questionId, content}) => (
      <div key={questionId}>
        <h3>{content}</h3>
        <div>
          {
            answers
              .filter(answer => answer.questionId === questionId)
              .map(({content, upvotes, answerId}) => (
                <div key={answerId}>
                  <span>{content} - {upvotes}</span>
                </div>
              ))
          }
        </div>
      </div>
    ))}
  </div>
);
#+end_src

Se puede observar dentro de la sintaxís JSX del componente que se consumen las propiedades ~questions~ y ~answers~ del estado ~data~. Se mapea el objeto ~questions~y se acceden a las propiedades ~questionId~ y ~content~. Con el ~questionId~ se agregra un key al elemento en el DOM y el ~content~ será renderizado dentro de una etiqueta ~<h3>~. Posteriormente se crea otra sección para filtrar las respuestas que estan asociadas al ~questionId~. Se mapean las propiedades ~answerId~, ~content~ y ~upvotes~. Similarmente se usa el ~answerId~ para asignarle una key al elemento en el DOM y se imprimen los valores de las propiedades ~content~ y ~upvotes~.

Al actualizar el navegador, se puede evidenciar como nuestra aplicación de encuestas va tomando forma. Ahora se tiene renderizada una pregunta y sus posibles respuestas con la votación respectiva.


* Recapitulación

Tiempo de desempacar las diferentes cosas revisadas a lo largo de esta publicación:

Primero se aprendio que así como el client accede al estado, el servidor también puede acceder al estado, las plantillas, entre otros de manera rápida y síncorna, siendo un proceso invisible para el usuario final.

Segundo, los componentes renderizados en el servidor se logran a través del uso del método `renderToString`. En pocas palabra, este método convierte el compnenet React en un string que puede ser manipulado por el servidor para generar un HTML. 

Por último, se tiene que una vez los componentes son renderizados como strings, pueden ser enviados al cliente como un HTML sin interactividad.

El siguiente paso es entrar de lleno al concepto de rehidratación para lograr intereactividad en los componentes renderizados por el servidor.

