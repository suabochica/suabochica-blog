#+TITLE: Server Rendering de Componentes React
#+DESCRIPTION: Serie para explicar el concepto de server rendering en react
#+AUTHOR: Sergio Benítez
#+DATE:<2021-07-15 Thu>
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

Hoy en día las aplicaciones web dependen cada vez más de experiencias de usuario rápidas y fluidas. Este requerimiento obliga a los desarrolladores a buscar estrategias para asegurar dichas experiencias en dispositivos viejos y lentos. Como alternativa se tiene la construcciones de componentes React renederizados en los servidores para crear aplicaciones que luzcan geniales, sean de carga rápida y su vez fáciles de mantener. En esta serie se van a cubrir los siguientes contenidos:

- Entendiendo el server rendering
  - Dónde es y no es apropiado
  - Costos y beneficios
  - Herramientas requeridas
- Andamiaje para una aplicación renderizada por el servidor
  - Creación de un servidor con Express
  - Compulación de JSX con React en el servidor
- Rehidratación de componentes renderizados por el servidor
  - Envío de componentes pre-renderizados al cliente
  - Entender y aplicar hidratación restaurando interactividad

El propósito de estas publicaciones es ofrecer al lecto la capacidad de construir una aplicación que se renderice en el servidor y entregue experiencias de usuario satisfactorais y al instante.

#+begin_notes
Para sacar mayor provecho de estas lecturas es tener conocimientos básicos React y JavaScript.
#+end_notes

* Entendiendo la renderización por servidor

Considere el siguiente caso: como desarrollador, se le solicita la construcción de una aplicación para sus clientes corporativos. Dicha aplicación es una agenda para altos ejecutivos. Siempre presionados por el tiempo, estos ejecutivos quieren que la aplicación cargue extremadamente rápido en sus celulares, tabletas o protátiles. Este tipo de aplicaciones suelen ser grandes y complejas, y por ende tomará tiempo en prestarse en su totalidad. No obstante, los clientes quieren resultados instantáneos. Para atender este requerimiento de resultandos inmediatos, una solución son las aplicaciones renderizadas por servidor.

En las aplicaciones renderizadas por servidor, el servidor obtiene varias responsabilidades que son reservadas para el cliente, y por lo tanto, dispositivos lentos ya no serían un inconveniente. Adicionalmente, el tiempo gastado para descargar React, cargar la aplicación en memoria y dibujar los componentes interactivos son los últimpos pasos ejecutados. En consecuencia, primero se ejecutan tareas para presentar información relativa al cliente, para evitar tiempos de espera prolongados. Tenga presente que el cliente ve la aplicación primero. Por otra parte, la funcionalidad completa de la aplicación, (diligenciamiento de formularios, salvar datos en el servidor, etc.) son activados luego de que React este cargado, lo que usualmente es hecho pocos segundos después de que la aplicación aparece.

Con este contexto en mente, es tiempo de empezar a implementar la aplicación para altos ejecutivos.

* Costos y beneficion de las aplicaciones renderizadas en el servido

Es válido pensar que si los beneficios de las aplicaciones renderizadas en el servidor son tan buenas, seguramente todas las aplicaciones deberián ser hechas de esta forma. Esto sería afirmativo siempre y cuando los costos asociados a hacer una aplicación renderizada por el servidor pudieran ser ignorados. A continuación se comparten los costos y se exponen los beneficios de hacer aplicaciones de este tipo:

** Costos

- Tener una lógica adicional en el back-end significa incluir más código en una aplicación estándar. Es necesario implementar el servidor, renderizar los componentes para asegurar que coincidan con el estado de la aplicación, entre otros.
- Son necesarias herramientas adicionales (express, webpack) que exponen el aplicativo tener más errores. Hay que tener en cuenta que el hizo de herramientas adicionales habilita un canal para que se presenten bugs en la aplicación. En otras palabras, más herramientas implican más problemas.
- Es posible que algún código corra diferente en el servidor, generando inconsitencia en la aplicación. Un ejemplo simple puede ser que un paquete del cliente esta en una versión diferente a la del servidor, haciendo que los componentes tanto del servidor como del cliente no coincidan generando que la aplicación no se muestre al final.
- Por último, el trabajo adicional en el servidor significa más costos para la empresa. Usualmente el incremento es mínimo, pero desde que el tiempo en servidor cuesta dinero, es importante considerar este aspecto.

** Beneficios
- Al poner más lógica en el servidor, se reduce el código enviado desde el cliente. Por ejemplo, si hay elementos de presentación que solo aparecen cuando la aplicación en cargada, dichos elementos pueden ser incluidos estrictamente en el servidor. Adicionalmente, la lógica enviada al cliente será hecha en tiempos más convenientes, luego de haber mostrado algún contenido.
- Quizar, el beneficio más importante es que la aplicación se carga más rapido, haciendo la difenrecia en dispositivos móviles. Los dispositivos móviles pueden tomar un tiempo largo en analizar todos los componentes en la aplicación. Con aplicaciones renderizadas en el servidor, dichos dispositivos veran contenidos antes de que los tiempo de carga hayan terminado, hecho que hace una gran diferencia para los clientes.
- En la misma línea se tiene que para instancias donde los usuarios se rinden con el uso de la aplicación por que su carga es muy lenta, dichos comportamientos son mitigados. Al momento en que se da clic en la URL, se comparte algún contenido para mantener entretenido al usuario. Dichos contenidos pueden implementarse sin necesidad de correr JavaScript.

En resumen, las aplicaciones renderizadas en el servidor cambian complejidad por rendimiento. La complejidad incrementa ya que se precisa de más código, el uso de bibliotecas sofisticadas y expone al desarrollador a solución de problemas complejos. Sin embargo, se obtiene mejor rendimiento en la aplicación, ya que la aplicación aparecerá más rápido en todos los dispositivos, resaltando los dispositivos móviles, caracterizados por que su lentitud de carga es usualmente un problema.

* ¿Cómo funciona la renderización en el servidor?

Tiempo de abordar la teoría detrás de la renederización en el servidor. Esta teoría será complementada por una aplicación de demostración que aterrizará los conceptos expuestos sobre esta arquitectura para desarrollo de aplicaciones web. El siguiente diagrama agrupa los flujos para la renderización de aplicaciones a través de clientes y servidores:

  #+CAPTION: Rendering flows
  [[../../images/react/server-rendering/01-server-rendering.png]]

En ambos casos, todo parte desde el acceso a la aplicación por parte del usuario a través de una URL. Para el caso de la renderización tradicional, el cual corresponde al flujo superior del diagrama, el servidor envía una buena cantidad de paquetes al cliente con contenidos de los componentes React, HTML, etc. Dichos contenidos son cargados con scripts y a través de peticiones AJAX se obtiene el estado de los datos de la aplicación y así finalmente el usuarion ejecuta una aplicación completamente funcional. Se resalta que todo este ciclo es muy fluido en computadores con conexiones rápidas y buen poder de procesamiento. Sin embargo, en dispositivos lentos, estos pasos pueden tomar varios segundos.

Es tiempo de dar un vistazo al escenario con renderización en el servidor, el cual corresponde al flujo en la parte de abajo del diagrama. Luego de que el usuario acceda a la aplicación, el servidor cargará React, junto con los componentes y el estado en la memoria omitiendo los llamados AJAX. Dado que los servidores se comunican con HTTP, esta carga se hace de manera rápida ya que los servidores por naturaleza tienden a ser rápidos. Por otra parte, es posible incrementar la velocidad en el servidor llegando a un acuerdo con su ISP. En el siguiente paso, los componentes en el estado se representan en una cadena HTML. Nada sofisticado, solo HTML puro. Esto será en escencia la salida de la aplicación, una version HTML de todos los compoenentes ensamblada al aplicativo. Este pqueño paquete HTML es enviado al cliente e inmediatamente se mostrarán datos relevantes al usuario. Para el caso de la aplicación agenda, se podría mostrar una tabla con las siguientes reuniones. Es aquí donde el proceso de renderizado en el servidor se alinea con el proceso de renderizado del cliente, ya que en este punto el cliente cargará el script y solicitará otra copia del estado de la aplicación con AJAX, ofreciendole una aplicación completamente funcional al usuario.

* Entendiendo las herramientas relevantes

Para comenzar esta sección se cita la siguiente frase de Confucio:

#+begin_notes
el mecánico que perfeccionaría su trabajo debe primero afilar sus herramientas
#+end_notes

Se resalta que para hace un aplicación React renderizada en el servidor, son necesarias algunas herramientas. Si se seleccionan las herramientas apropiadas, se ahorra tiempo. Las herramientas a utilizar son:

- *React*, para renderizar JSX a HTML tanto en el cliente como en el servidor.
- *Express*, para enviar el contenido HTML renderizado en el servidor al cliente. No obstante, Express esta en capacidad de abastecer más tareas, como por ejemplo el uso de sus manipuladores para administar la rutas del aplicativo.
- *Babel* para cargar código JSX en el script del servidor. Se señala que Node esta basado en JavaScript, y al igual que un navegador, no entiente la sintáxis JSX. Por lo tanto, el JSX debe convertirse a JavaScript y para ello se utiliza Babel.

* Vista completa de la aplicación de demostración

La aplicación será un sistema de encuestas en donde se publicarán preguntas con múltiples respuestas, y se mostrará el porcentaje de votos de cada respuesta. Estas son la funcionalidades releveantes de la aplicación:

- Entrega de contenido renderizado por el servidor
- Iteractividad garantizada por rehidratación
- Persistencia del estado de la aplicación

A continuación se comparte la estructura de archivos de la aplicación:

#+begin_src
react-server-rendering/
├─ client/
│  ├─ App.jsx
│  ├─ client.jsx
├─ dist/
├─ public/
│  ├─ index.html
├─ server/
│  ├─ database.js
│  ├─ server.js
├─ shared/
├─ .babelrc
├─ .gitignore
├─ package.json
├─ README.md
├─ webpack.config.js
#+end_src

La aplicación esta publicada en el siguiente [[https://github.com/suabochica/server-render-poll-app][repositorio]].

A lo largo de las publicaciones se explicará en detalle los contenidos de cada uno de los directorios y los archivos. En términos generales, hay unos archivos de configuración correspondientes a las herramientas operativas que se utilizan en el proyecto: Webpack y Babel. Dentro del fichero ~/client~ estará contenida toda la aplicación. Adicionalmente, en el archivo ~public/index.html~ se importan las librerías desde un CDN (Content Delivery Network), para salvar unos segundos en la carga de las librerías de React y Bootstrap. Por otra parte, este archivo exporta una variable ~{{rendered}}~ que será utilizada por el servidor para publicar el paquete HTML generado desde allí. En la carpeta ~server/~ se tiene un mock de una base de datos y el archivo que cargará el servidor con Express.

* Recapitulación
A continuación se exponent los datos más interesantes de los expuesto en esta publicación:

- Las aplicaciones React renderizadas en el servidor intercambian más complejidad por un mayor rendimiento.
  - Son requeridos más herramientas, conocimiento técnico y más código.
  - Como resultado, el cliente obtiene información relevante mucho más rápidos en su dispositivo.
- Las aplicaciones renderizadas por el servidor primero envian y paquete HTML pequeños al clinte y después se envía la mayoría del código de la aplicación.
  - El cliente esta en capacidad de interactuar solo hasta que se cargue la mayoría del código de la aplicación
- Express, React, Webpack y Babel son herramientas requeridas para construir una aplicación renderizada por el servidor.
