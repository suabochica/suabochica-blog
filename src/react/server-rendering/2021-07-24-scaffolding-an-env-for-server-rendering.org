#+TITLE: Andamiaje de un app renderizada en el servidor
#+DESCRIPTION: Serie para explicar el concepto de server rendering en react
#+AUTHOR: Sergio Benítez
#+DATE:<2021-07-24 Sat>
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

No se puede construir una un edificio sólido sin una buena base y el entrono que se va a montar es en muchas formas la base para una aplicación renderizada en el servidor. Estos son los objetivos que se van a abordar en la publicación:

- Usar Webpack y Babel de manera fluida para transformar la sintáxis JSX en JS. Se recuerda que tanto el navegador como Node no entienden JSX por cuenta propia. Por lo tanto el código JSX tiene que ser transformado a JavaScript.
- Usar Express para crear un servidor HTTP donde la lógica personalizada puede ser escrita.
- Crear componentes React sin una lógica interna y que puedan ser renderizados tanto por el servidor como el cliente.

* Decisiones de andamio
En el ecosistema de React, es popular la herramienta ~create-react-app~ para crear aplicaciones React. ~create-react-app~ es una utilidad de línea de comandos para montar aplicaciones React bajo el consenso de buenas practicas establecidad por un elenco de desarrolladores seniors. No obstante, el uso de esta herramienta ofrece tanto ventajas como desventajas que se van a revisar a continuación:

** Ventajas
- Se necesita poca o ninguna comprensión de la pila completa de tecnologías para el desarrollo web.
- Esta en revisión constante por expertos.
- Es una herramientas estándar de la industria. Los desarrolladores suelen estar familiarizados con ella.
- Create de manera automatica una estructura de directorio basado en las mejores prácticas.
- La herramientas utilizadas estan basadas en las mejores prácticas.
- Es fácil la implementaciones de nuevas funcionalidades como: linting, server-side rendering, etc.

** Desventajas
- Al no ser necesario una comprensión de la pila completa de tecnología para el desarrollo web, varios fundamentos pueden ser omitidos.
- El valor educativos es insignificante.
- Tener una gran pila de tecnologías hace que la solución de problemas sea complejo.
- Create de manera automatica una estructura de directorio basado en las mejores prácticas.
- No favorece la elección de herrmaientas.
- Es díficil la implementación de funcionalidades que no están soportadas.

Para los propósitos de esta serie de publicaciones sobre la renderización en el servidor, se va a omitir el uso de ~create-react-app~ ya que se pretenden objetivos educacionales sobre este tipo de arquitecturas.

* Creando el proyecto e instalando las dependencias

Antes de instalar las dependencias es importante tener en cuentas que si se presenta algún bloqueo, puede ser de utilidad las siguientes recomendaciones:

- La versión de React que se va a utilizar es la v16.12.2. Así mismo, se sugiere validar que las versiones de los paquetes utilizados sean las apropiadas.
- Revisar los confilctos entre ambientes locales y globales. Es recomendable usar scripts npm para tener autoría sobre el entorno local.
- La fuente del código del proyecto puede ser revisada en el siguiente repositorio: https://github.com/danielstern/server-rendered-react-app

Para el aplicativo de encuestas se van a instalar las siguientes dependecias para tener un estado inicial del proyecto:

#+begin_src
$ npm init --y
$ npm i react@16.12.0 react-dom@16.12.0 express@4.1 --save
$ npm i @babel/core@7.7.7 @babel/node@7.7.7 babel-loader@8.0.6 --save-dev
$ npm i webpack@4.41.5 webpack-cli@3.3.1 webpack-dev-server@3.10.1 --save-dev
#+end_src

