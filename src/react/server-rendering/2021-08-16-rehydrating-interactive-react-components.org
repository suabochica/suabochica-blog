
#+TITLE: Rehidratando componentes React interactivos
#+DESCRIPTION: Serie para explicar el concepto de server rendering con React
#+AUTHOR: Sergio Benítez
#+DATE:<2021-08-16 Mon>
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

Hasta ahora se ha logrado renderizar componentes React en el servidor pero sin interactividad alguna. Es evidente que para lograr esta funcionalidad es necesario el uso de una nueva herramienta. Por lo tanto es conveniente recalcar cuales son las limitaciones de los componentes renderizados en el servidor.

* Limitaciones de los componentes renderizados en el servidor

Es importante tener presente que los componentes renderizados en el servidor sin interactividad son una /fachada/. Una fachada es una construcción cuyo único propósito es proveer una impresión visual placentera, y puede enmascarar una estructura sólida y funcional ó una estructura que se está desmoronando. Los componentes renderizados en el servidor están realmente limitados si no usan rehidratación.

En otras palabras, los componentes renderizados en el servidor son solo pequeños pedazos HTML sin ninguna funcionalidad real. Al hacer clic en algún botón o interacción en un formulario, no se generan cambios en el estado. El uso de tooltips o organización de contenidos no va a funcionar y las comunicaciones automáticas con el servidor tampoco. Para evitar la figura de fachada, la tecnología a utilizar es la rehidratación.

* Entendiendo la rehidratación

Antes de agregar rehidratación en la aplicación, es conveniente revisar el concepto como tal. La siguiente definición es un punto de partida:

#+begin_notes
/Rehidratación/: Es el proceso para restaurar interactividad y funcionalidad en los componentes renderizados por el servidor.
#+end_notes

Para complementar esta definición, se recuerda que la librería de React que se ejecuta en el cliente tiene la capacidad de reconocer el entregable del servidor cuyo desarrollo inicial esta hecho en React. Por tanto, el código del cliente puede vincularse al marcado existente e instantáneamente puede sustituir el componente por una versión totalmente funcional sin necesidad de redibujar los elementos HTML.

La siguiente tabla compara las características de los componentes renderizados en el servidor que no son hidratados contra los que si son hidratados:

| Componentes No Hidratados                                                    | Componentes Hidratados                                                         |
|------------------------------------------------------------------------------+--------------------------------------------------------------------------------|
| Son extremadamente ligeros                                                   | Son ligeros pero requieren de librerías JavaScript                             |
| No se puede interacuar con ellos                                             | Son completamente interactivos                                                 |
| No precisan de JavaScript ni React para funcionar                            | Tanto React como JavaScript deben ser ejecutados en el dispositivo del cliente |
| No se actualizan por si mismo como respuesta a cambios en el modelo de datos | Ofrecen actualizaciones de alto rendimiento basado en el cambio de estado     |

Con estas aclaraciones, es tiempo de rehidratar el componente React que tenemos para la aplicación de encuestas.

* Agregando interactividad al componete renderizado en el servidor utilizando rehidratación
  
Estos son los detalles a tener en cuenta para agregar interactividad al componente renderizado en el servidor:

Primero se va a crear un servicio REST API que le permita acceder al cliente al mismo estado al que accede el servidor. Para ello se utiliza el Fetch API de JavaScript para realizar una petición GET que permita acceder al estado.

El segundo paso es rehidratar la aplicación en el cliente. El efecto se verá en los botones designados para las votaciones de las repuestas en la encuesta. Por ahora el resultado de la rehidratación no va a coincidir con el conjunto de datos, tan solo va reflejar una versión inicial.

En ese orden de ideas, se va a agregar el contenido de la variable ~data~ en una ruta del servidor. Con express dicha configuración resulta sencilla con ayuda del método ~.get~ que recibe como primer argumento la ruta en la que se va a exponer la variable (para este caso ~localhost:7777/data~) y como segundo parámetro una función que hace una petición y trae como respuesta el valor de la variable ~data~. El siguiente código ilustra las modificaciones sobre el archivo ~server/index.js~

#+begin_src javascript
// server/index.js
app.use(express.static("dist"));
app.get("/data", async (_request, response) => {
  response.json(data);
});
app.get("/", async (_request, response) => {
  const index = readFileSync("public/index.html", "utf8");
  const rendered = renderToString(<App {...data} />);
  response.send(index.replace("{{rendered}}", rendered));
});
#+end_src

Con el estado expuesto desde el servidor, es tiempo de consumirlo desde el cliente. Para ello se define una variable global ~state~ y con ayuda del API ~fetch~ de JavaScript se recupera el contenido de la variable data en la ruta ~localhost:7777/data~ y se almacena dicha respuesta en la variable ~state~ definida previamente. La parte inicial del siguiente snippet, muestra como se hace efectiva la descripción anterior:

#+begin_src javascript
// client/client.jsx
import React from 'react';
import ReactDOM from 'react-dom';

import { App } from './App';

let state = undefined;

fetch("http://localhost:7777/data")
  .then(data => data.json())
  .then(json => {
    state = json;
    console.log("Got the state", state);
    render()
  });

function handleModifyAnswerVotes(answerId, increment) {
  state.answers = state.answers.map(answer => {
    if (answer.answerId !== answerId ) {
      return answer;
    } else {
      return { ...answer, upvotes: answer.upvotes + increment };
    }
  });
  render();
}

function render() {
  ReactDOM.hydrate(
    <App {...state} handleModifyAnswerVotes={handleModifyAnswerVotes}/>,
    document.querySelector("#container")
  );
}
#+end_src

Una vez recuperado el estado se podrá rehidratar el componente. Para ello, el primer paso es crear una función ~render()~ que utilice el método ~ReactDOM.rehydrate~ el cual recibe como primer argumento el componente a reahiratar, y como segundo argumento el selector sobre el que se va a embuir el componente.

Como se puede observar, al definir el componente ~<App />~ dentro de la función ~rehydrate()~ se le está pasando la variable ~state~ y un atributo ~handleModifyAnswerVotes~. Previamente se declaró una función ~handleModifyAnswerVotes()~ cuya responsabilidad es actualizar las votaciones realizadas en las respuestas de las preguntas. Dicha función recibe como argumento el ~answerId~ y el tipo de acción ~increment~ para hacer un mapeo sobre las respuestas definidas en la variable ~state~ y así identificar que respuestas deben ser actualizadas.

El hecho más relevante en este bloque de código es el llamado de la función ~render()~ al final del llamado ~fetch()~ y de la función ~handleModifyAnswerVotes()~. De este forma es que se especifica los momentos en los que el componente debe ser rehidratado.

Por último, es necesario actualizar el componente ~<App />~ para que reciba como propiedad la función ~handleModifyAnswerVotes~ que será asociada al evento ~click~ de unos botones que se van a agregar al marcado para actualizar las votaciones en las respuestas de cada una de las preguntas. El siguiente código contempla las modificaciones descritas:

#+begin_src javascript
// client/App.jsx
import React from 'react';

export const App = ({questions, answers, handleModifyAnswerVotes}) => (
  <div>
    <h1>Q&A Tool</h1>
    {questions.map(({questionId, content}) => (
      <div key={questionId}>
        <h3>{content}</h3>
        <div>
          {
            answers
              .filter(answer => answer.questionId === questionId)
              .map(({content, upvotes, answerId}) => (
                <div key={answerId}>
                  <span>{content} - {upvotes}</span>
                  <button onClick={() => handleModifyAnswerVotes(answerId, 1)}> + </button>
                  <button onClick={() => handleModifyAnswerVotes(answerId, -1)}> - </button>
                </div>
              ))
          }
        </div>
      </div>
    ))}
  </div>
);
#+end_src

Si se abre el navegador, se contempla que cada vez que se hace clic sobre el botón ~+~ o ~-~ el número de votaciones asociado a cada una de las respuestas es actualizado. Ya se tiene la primera interacción en un componente renderizados en el servidor. No obstante, dichas interacciónes no son registradas en el estado del servidor y por lo tanto cada vez que se refresca el navegador se pierden los cambios realizados. tiempo de revisar los últimos detalles para tener una funcionalidad completa en el componente renderizado en el servidor.

* Compartiendo código entre el cliente y el servidor

Compartir código entre el cliente y el servidor es un tema avanzado, pero puede lograrse de forma sencilla cuando se han ejecutado los pasos previos asociados a rehidratación e interectividad.

Cuando el back-end de una aplicación renderizada en el servidor no esta escrito en JavaScript, es común que el código deba ser duplicado en multiples lenguajes de programación para que funcione. Al tener el back-end en JavaScript se cuentan con las siguientes ventajas:

- Las bibliotecas como React son exactamente las mismas para el cliente y el servidor.
- La utilidades para personalizar el código que funciona con el conjunto de datos se puede compartir con facilidad.
- Las pruebas, al tener las mismas especificaciones pueden retulizarse tanto en el cliente como en el servidor.

En esta sección se va a profundizar el punto en la lista previa asociado a las utilidades. En ese orden de ideas el primer paso es crear una utilidad simple con JavaScript en el servidor. El segundo paso es cargar la utilidad y utilizarla desde el cliente. Por último se va a actualizar el script que registra las votaciones en el servidor.

** TODO Create a simple JavaScript utility
  
** TODO Load and use the utility on the client

** TODO Update script to modify upvotes on server as well
