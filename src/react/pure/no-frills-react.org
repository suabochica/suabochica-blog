#+TITLE: React Puro
#+DESCRIPTION: Serie que recopila una descripción general de React
#+AUTHOR: Sergio Benítez
#+DATE:<2021-03-12 Thu> 
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

Un buen ejercicio para comenzar a explorar el mundo de React es escribir un componente React Puro, sin paso de compilación, sin JSX, sin Babel y sin Webpack or Parcel. Solo algo de JavaScript en la página.

Para ello, se va a crear una carpeta proyecto con el nombre ~adopt-me~ desde la cual se va a construir una aplicación para adoptar mascotas. El primer paso es crear un directorio ~src/~ con el archivo ~index.html~:

#+begin_src html
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <link rel="stylesheet" href="./style.css">
  <title>Adopt Me</title>
</head>

<body>
  <div id="root">not rendered</div>
  <script src="https://unpkg.com/react@17.0.1/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@17.0.1/umd/react-dom.development.js"></script>
  <script>
    // Your code is going to go here
  </script>
</body>

</html>
#+end_src

Al abrir este archivo en el navegador se verá una línea de texto diciendo "not rendered". En resumen esta son las instrucciones descritas en el documento ~index.html~:

- Es un documento estándar HTML5
- Se agregar un elemento ~<div>~ la cual va a renderizar la aplicación React más adelante.
- Se importaron las bibliotecas the ~react@17.0.1~ y ~react-dom@17.0.1~ a través de dos etiquetas ~<script>~
- Se dejo una etiqueta ~<script>~ libre que es en donde se va a poner el código del componente React. 

La biblioteca ~react@17.0.1~ es la interfaz para interactuar con Reactl todos los métodos (excepto uno ~render()~) estarán disponible a través de esta biblioteca. La biblioteca no contiene una forma para renderizarse a si misma, es solo un API. La biblioteca ~react-dom@17.0.1~ es la capa de renderización. Ya que para este caso se va a renderizar en el navegador, se necesita usar React DOM. Se recuerda que hay otras librerías como React Native o React 360, que determinan en que contexto se va a renderizar React. El orden de las importaciones no es importante.

El contenido del ~<script>~ abierto es el siguiente.

#+begin_src js
const App = () => {
  return React.createElement(
    "div",
    {},
    React.createElement("h1", {}, "Adopt Me!")
  );
};

ReactDOM.render(React.createElement(App, docoument.getElementId('root'));
#+end_src

Y está es la forma más sencilla de construir una aplicación React. Las siguientes instrucciones explican el código previo:

1. ~App~ es el componente propio que se esta creando. React gira en torno de la creación de componentes, y en utilizar estos componentes para crear otros.
2. Hay dos tipos de componentes: componentes funcionales y componentes de clase. el componente ~App~ es un componente funcional.
3. Un componente funcional debe retornar un marcado generado por ~React.createElement~.
4. Estas funciones de renderización de componentes deben ser rápidas ya que serán llamadas con mucha frecuencia. Es una ruta de código caliente.
5. Dentro de la función de renderización no se puede modificar cualquier tipo de estado. En terminos funcionales, esta función tiene que ser pura.
6. ~React.createElement~ crea una instancia de algún componente. Si se pasa un string, el va a crear una etiqueta DOM con ese string. Para este ejemplo se usaron las etiquetas ~h1~ y ~div~ que son enviadas al DOM.
7. El segundo argumento corresponde a los atributos que se pasan a la etiqueta o la componente. Para este caso se envió un objeto vacío ~{}~.
8. ~ReactDOM.render~ es lo que toma el componente de ~App~ renderizado y lo coloca en el DOM (en este caso, se coloca en el elemento con id ~root~).
9. Observe que  ~React.createElement~ usa ~App~ como parámetro para ~ReactDOM.render~. Se necesita una instancia de ~App~ para renderizar. ~App~ es de la clase componente y con ~React.createElement~ se crea una instancia de dicha clase.

Para cerrar esta introducción a React puro, el tema pendiente son los props de los componentes React. Considere el siguiente componente ~Pet~.

#+begin_src js
const Pet = () => {
  return React.createElement(
    "div",
    {},
    [
      React.createElement("h2", {}, "Luna"),
      React.createElement("h3", {}, "Dog"),
      React.createElement("h3", {}, "Havanese"),
    ]
  );
};
#+end_src

Este componente ~Pet~ pretende representar a cualquier mascota, pero en esete momento solo representa a ~Luna~. Lo conveniente es poder llamar el componente ~Pet~ de la siguiente forma:

#+begin_src js
React.createElement(Pet, {name: "Luna", animal: "Dog", breed: "Havanese"}),
React.createElement(Pet, {name: "Pepper", animal: "Bird", breed: "Cockatiel"}),
React.createElement(Pet, {name: "Sudo", animal: "Dog", breed: "Wheaten Terrier"}),
#+end_src

Para darle mayor flexibilidad al componente ~Pet~, se hacen las siguientes modificaciones de la versión inicual, acudiendo al uso de los ~props~:

#+begin_src js
const Pet = (props) => {
  return React.createElement(
    "div",
    {},
    [
      React.createElement("h2", {}, props.name),
      React.createElement("h3", {}, props.animal),
      React.createElement("h3", {}, props.breed),
    ]
  );
};
#+end_src

Ahora si se revisa el navegador, se va a renderizar el componente ~Pet~ con la respectiva información de cada una de las mascotas. Esta es una de las principales funcionalidades de React, pasar la información desde el componente padre hacia el componente hijo. Hay que tener en cuenta que el flujo de datos es unidirección y va de arriba hacia abajo. Para este caso, ~Pet~ *no* podría enviar datos a ~App~
