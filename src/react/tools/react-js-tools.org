#+TITLE: Herramientas de JavaScript
#+DESCRIPTION: Serie que recopila una descripción general de React
#+AUTHOR: Sergio Benítez
#+DATE:<2021-03-15 Thu> 
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

Es tiempo de indagar sobre la diferentes herramientas que permiten crear un ambiente de desarrollo para aplicaciones web React:

## npm

~npm~ no significa Node Package Manager, pero si es un administrador de paquetes para NodeJS. ~npm~ se ha compertido en el gestor de paquetes del campo frontend y cuenta con una herramienta de líneas de comando llamada ~npm~ también. ~npm~ permite traer código desde el registro de ~npm~ en donde se almacenan una cantidad consideraple de módulos de código abierto que la gente ha escrito y que cualquiier desarrollador puede utilizar. Al correr el siguiente comando:

#+begin_src zsh
npm install react
#+end_src

Se va a obtener la última versión de React guardada en el registro de npm. Para crear un proyecto ~npm~ se ejecuta el siguiente comando en el directorio raíz del proyecto:

#+begin_src zsh
npm init -y
#+end_src

El requisito es tener instalado NodeJS. Una vez ejecutado el comando se creará un archivo ~package.json~ el cual se va a modificar más adelante. Este archivo permite instalar y salvar paquetes.

## Prettier

Es importante mantener una calidad alta cuando se escribe código, o por lo menos, aceptar como compañeros de trabajo a la combinación ESLint y Prettier. La mayoría de los desarrolladores somos perezosos y siempre estamos en la búsqueda de recargar varias responsabilidades a la máquina para tener el foco en tareas de arquitectura y resolución de problemas, invertiendo la menor cantidad de tiempo posible en contextos de sintáxis y estilo de código. Hay muchas herramientas que nos ayudan a mantener la calidad del código alta, pero ESLint y Prettier son quizas la más populares en el flujo de trabajo de aplicaciones web.

Prettier es una herramienta increible, ya que su creador estaba hastiado de lidiar con problemas de estilo de código: donde colocar sangrías, cuando usar saltos de línea, entre otros.Prettier toma el código que se escribe, lo descompone en un árbol de sintaxis abstracta (AST) que es solo una representación de su código. Luego toma ese AST, desecha todo el estilo de código que creó y lo vuelve a imprimir usando un estilo predefinido. Si bien esto suena un poco aterrador, el resultado es genial. Al perder el control del estilo de su código, ya no tiene que pensar en ello. Su código siempre es coherente, al igual que el código del resto de su equipo.

Una analogía valida es si tu cerebro es un procesador, puedes liberar el hilo de tu cerebro que se preocupa por los estilos de código y la legibilidad: simplemente te sucede a ti. ¿No te gustan los puntos y comas? ¡No las escribas! Los pone por ti. Punto para Prettier.

Para instalar Prettier se ejecuta el siguiente comando:

#+begin_src zsh
npm install -D prettier
#+end_src

Ahora se crea el archivo ~.prettierrc~. En este archivo se van a definir las configuraciones que se quieren aplicar sobre determinado formato de archivo. Prettier ofrece reglas de estilo de código para JavaScript, TypeScript, JSX, entre otros. Las (opciones)[https://prettier.io/docs/en/options.html] que ofrece Prettier de configuración son varias, ya que van desde el ancho de impresión, hasta el ancho del Tab. Por ahora se va a dejar una configuración vacía para el archivo ~.prettierrc~:

#+begin_src js
// .prettierrc
{}
#+end_src

Prettier funciona de maravilla con Visual Studio Code. La recomendación es instalar la (extensión)[https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&WT.mc_id=reactintro-github-brholt] y configurarla para que que Prettier solo se ejecuto cuando detecte un archivo ~.prettierrc~. Para ello, hay que buscar dentro del archivo de configuración de la extensión la opción ~prettier.requireConfig~ y definirla como ~true~. Si se quiere dar formato al archivo cuando se guarde, se debe definir la opción ~editor.formatOnSave~ con ~true~

Puede ser algo incómodo tratar the recordar todos los comandos CLI que se puede correr en el proyecto, Dichos comandos pueden etiquetarse en la sección "scripts" del  ~package.json~. Por ejemplo, el comando para dar formato a los archivo ~.js~ y ~.jsx~ sería:

#+begin_src js
// package.json
{
    "scripts": {
        "format": "prettier --write \"src/**/*.{.js, .jsx}"
    }
}
#+end_src

Ahora se puede ejecutar el siguiente comando:

#+begin_src zsh
npm run format
#+end_src

Con esta configuración ya no es necesario recordar la cantidad de comandos que se pueden ejecutar para darle formato al código. Sobra la marcha se aprenderá mas de las funcionalidaes de Prettier.

## ESLint

Ya se vio que Prettier soluciona todo lo realtivo al formato de código. Ahora bien, es posible forzar algunos estilos de código relacionados a uso. Por ejemplo, usted quiere forzar a que el equipo  nunca utilice la palabra reservada ~with~ de JavaScript, ya que no se considera una buena práctica en JavaScript. ESLint entra en este contexto ya que ayuda a resolver dichos contextos.

El primer paso es instalar ESLint a través de ~npm~ con sus respectivas dependencias:

#+begin_src zsh
npm install -D eslint eslint-config-prettier
#+end_src

Una vez instalado, se procede con la configuración del linter. Actualmente hay docenas de configuraciones preestablecidas para ESLint y puede usar cualquiera de ellas. La configuración de Airbnb es muy popular, al igual que la configuración estándar. Por ahora se va a crear un archivo ~.eslintrc.json~ para comenzar a ligar el proyecto.

#+begin_src js
//.eslintrc.json
{
    "extends" : [
        "eslint:recommended",
        "prettier"
    ],
    "plugins": [],
    "parserOptions": {
        "ecmaVersion": 2021,
        "sourceType": module,
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "env" : {
        "es6": true,
        "browser": true,
        "node": true
    }
}
#+end_src

Esta combinación es la configuración recomendada para ESLint y Prettier. Dicha configuración señalara inconsistencias para archivo ~.js~ y ~.jsx~. Para visualizar los errores encontrador por el linter, es necesario agregar el siguiente script:

#+begin_src js
// package.json
{
    "scripts": {
        "lint": "eslint  \"src/**/*.{.js, .jsx} --quiet"
    }
}
#+end_src

Ahora se puede ejecutar el siguiente comando:

#+begin_src zsh
npm run lint
#+end_src

El resultado de este comando arrojará todos los errores el ESLint encuentre en el proyecto. Como alternativa se puede ejecutar el comando lint con la opción ~--fix~ para solucionar dichos errores:

#+begin_src zsh
npm run lint --fix
#+end_src

No obstante, es recomendable hacer una revisión previa sobre los errores encontrados y una revisón de las soluciones ejecutadas por el comando.

Por último, ESLint es muy fácil para trabajar con Visual Studio Code. Solo baja la [extensión](https://code.visualstudio.com/) y ahora se podrá redigira a la documentación de ESLint desde Visual Studio Code.

## Parcel

Parcel es un empaquetador de proyectos para JavaScript. Otra alternativa popular es Webpack, pero requiere de mayor tiempo para su configuración. La recomendación es usar Webpack para proyecto grandes. Dicho esto, el atractivo de Parcer es que no requiere de pasos de configuración. Dado que esta es una serie sobre React y no sobre procesos de compilación, el enfoque estará guiado hacia React. El primer paso es instalar Parcel:

#+begin_src zsh
npm install -D parcel@1.12.3
#+end_src

Posteriormente se agrega un nuevo script en el ~package.json~ para indicarle a Parcel cual es el punto de entrada de la aplicación:

#+begin_src js
// package.json
{
    "scripts": {
        "dev": "parcel src/index.html"
    }
}
#+end_src

Ahora se puede ejecutar el siguiente comando:

#+begin_src zsh
npm run dev
#+end_src

Al abrir el navegador en el ~http://localhost:1234~ verá el proyecto montado. La diferencia aquí es que ahora se está ejecutando a través de Parcel, lo que significa que se puenden aprovechar todas las funciones que Parcel nos permite y que exploraremos en breve.

## Babel

Babel es una parte fundamental del ecosistema de JavaScript, al ser la herramienta de traspilación más popular en JavaScript. En esencia, traspilar código es tomar un aspecto del mismo implementado en determinada manera y transformalo en un conjunto de código de aspecto diferente. Uno de sus usos principales es transformar JavaScript futurista (como ES2021) en una versión anterior de JavaScript (como ES5, es decir, JavaScript antes de 2015) para que los navegadores más antiguos puedan usar su JavaScript más nuevo. Babel también maneja cosas como JSX y TypeScript

Por fortuna, Parcel esta en capacidad de incluir en su configuración aspectos de Babel al momento de ejecutar el siguiente comando:

#+begin_src zsh
npm install -D @babel/core@7.12.16 @babel/preset-react@7.12.13
#+end_src

La configuración manual que se debe realizar es indicarle a Babel los requerimientos preestablecidas que se van a usar en el proyecto. Para este caso, se va a usar el ~preset-react~. Para ello se crea el archivo ~.babelrc~ con el siguiente contenido:

#+begin_src js
// .babelrc
{
    "presets": [
        [
            "@babel/preset-react",
            {
                "runtime": "automatic"
            }

        ]
    ]
}
#+end_src

Con esta configuración el proyecto ya esta en capacidad de realizar las transformaciones de JSX, tema del que vamos a hablar en con conceptos fundmentales de React.

## Browserslist

Babel transforma su código JS de código futurista a código comprensible para navegadores más antiguos a través de un paquete llamado [Browserslist](https://browserslist.dev/) (que Parcel instaló para usted).  En Browserslist usted puede ver por medio de consultas que cobertura global tiene al especificar la lista de navegadores que quiere soportar en el proyecto. Por defecto Parcel usa la configuración ~> .25% que apunta a todos los navegadores que tiene mas the un ~.25%~ de uso. Esta configuración ofrece una cobertura del 92% de todos los usuarios de Internet.

Para cambiar esta configuración por defecto se debe agregar al ~package.json~ la siguiente propiedad:

#+begin_src js
// package.json
{
    "browserslist": {
        "last 2 Chrome version"
    }
}
#+end_src

Con esta congfiguración se esta diciendo que el proyecto va a ofrecer cobertura sobre las dos últimas versiones de Chrome. Dependiendo de su audiencia, este valor puede cambiar.

## Recapitulación

En esta publicación se registraron cuales son las herramientas que nos permiten crear una aplicación React. Partiendo desede ~npm~ como gestor de paquetes, resaltando los beneficios de la combinación Prettier y ESLint para evitar preocupaciones en formato de códigos o usos indebidos del lenguaje de programación, el uso de Parcel como empaquetador de JavaScript con cero configuraciones, y la combinación Babel y Browserslist para traspilar el código JavaScript moderno a versionos que soportan los navegadores mas antiguos.

Ahora es tiempo de entrar de lleno a los conceptos fundamentales de React. Este será un tema desarrollado en la siguiente publicación.