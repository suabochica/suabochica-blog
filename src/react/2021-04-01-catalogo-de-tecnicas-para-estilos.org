#+TITLE: Catálogo de técnicas para estilos en React
#+DESCRIPTION: Serie que recopila el estado de arte del manejo de estilos en React
#+AUTHOR: Sergio Benítez
#+DATE:<2021-04-01 Thu> 
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

En esta publicación se van a revisar las cuatro técnicas más populares para manejar estilos en React:

1. Estilos en línea
2. CSS-en-JS
3. Hojas de estilos CSS
4. Módulos CSS

El objetivo es identificar las fortalezas y debilidades que cada una de las técnicas y perfilar en que escenarios es conveniente aplicar cada una de ellas.

* Estilos en línea

Cuando se trabaja con una teconolgía para crear componentes UI como React, resulta útil tener la capacidad de encapsular los estilos junto con la lógica (JS) y el marcado (HTML). Esta aproximación es una de las fuerzas impulsoras en torno al resurgimiento y la aceptación de los estilos en línea en React.

Esta técnica, no es nueva, y en su momento se considero como una mala práctica, pero bajo el contexto de componentes web su oferta se hace llamativa.

La sintáxis resulta familiar, ya que se usa el atributo ~styles~ en el marcado, más precisamente en la sintáxis JSX:


#+begin_src jsx
const styles = {
  color: 'white',
  background: 'blue',
  padding: '0,5rem 1rem',
  borderRadius: '2px',
}

<button style={styles}> Click me </button>
#+end_src

Como se puede observar, el valor de la variable ~styles~ es un objeto JavaScript, en vez de una cadena de caractéres como se espera en el HTML tradicional.

Por otra parte los atributos del objeto JavaScript son corresponden a las propiedades en CSS con la diferencia de que son definidos en /camelCase/, en vez del /dash-case/ de CSS.

Al ser todo JavaScript, ahora se dispone de la flexibilidad de especificar los estilos basados en JavaScript en donde se quiera; en un objeto literal en la propiedad ~style~, referenciar los estilos en un objeto vinculado a una variable en algún otro lugar o incluso generar estilos con funciones JavaScript.

A continuación se presentan las ventajas que ofrecen los estilos en línea:

- Encapsulación
- Compartir código
- Aislamiento
- Dependencias explícitas
- No hay uso de bibliotecas externas

Ahora bien, estos son los puntos en contra del uso a los estilos en línea:

- La lecutra es cascada de CSS anula estilos externos
- No se pueden usar media queries directamente
- No se pueden usar pseudo selectores
- No se pueden usar animaciones con keyframes

En consecuencia, es necesario optar alternativas para atender estás funcionalidades puntuales.

En consclusión estos son los síntomas que determinan si resulta viable el uso de los estilos en línea:

- El desarrollo es centrado en JavaScript
- Simplicidad
- Los estilos son co-localizados
- No hay dependencias de bibliotecas externas

* CSS-en-JS

Las opciones de CSS-en-JS manifiestan fortalezas similares a los estilos en línea, y la razón por la cual se clasifican de manera diferente es por la presencia de una biblioteca de estilos que soporte estilos basados en JavaScript e incluyan funcionalidades propias de CSS. Esta es una lista de las librerías más populares del enfoque CSS-en-JS:

- styled-components
- emotion
- aphrodite
- glamor
- ... muchas más

A diferencia de los estilos en línea, las bibliotecas CSS-en-JS se encargan de generar la hoja de estilos CSS y lo inyectan en la página en tiempo de ejecución. Por otra parte, habilita muchas de las funcionalidades que se esperan utilizar en CSS como media queries o animaciones con keyframes.

Es tiempo de dar un vistazo a la biblioteca ~styled-components~ para entrar en detalle a la oferta de esta técnica. Uno de sus puntos a favor es que permite crear estilos con la sintáxis CSS a través de ~tagged template literals~. Su propósito es crear componentes React vinculados a esto estilos por medio del objeto ~styled~ del respectivo paquete. Tenga en cuenta el siguiente ejemplo:

#+begin_src jsx
import styled from 'styled-components'

const Button = styled.button`
  color: white;
  background: blue;
  padding: 0,5rem 1rem;
  borderRadius: 2px;
`
function MyComponent() {
  return (
    <Button>Already styled</Button>
  )
}
#+end_src

Aquí es importante resaltar que el objeto ~styled~ tiene adjunto todos los tipos elementos disponbiles en HTML. Es por esta razón que se puede acceder al ~styled.button~ para dar estilos al elemento botón. Otros elementos que se pueden acceder son ~.div~, ~.header~, ~.input~ por mencionar algunos. De este modo al usar ~styled-component~ en el diseño del componente React, los estilos ya estaran adjuntos.

Como se menciono anterior mente esta biblioteca permite hacer uso de media queries, pseudo selectores y animación con keyframes:

#+begin_src jsx
import styled, { keyframes } from 'styled-components'

const jitter = keyframes`
  0% { transition: scaleY(0,9); }
  100% { transition: scaleY(1); }
`

const Button = styled.button`
  animation: ${jitter} 350ms ease-out infinite;
  color: white;
  background: blue;
  padding: 0,5rem 1rem;
  borderRadius: 2px;

  &:hover {
    outline: 2px solid white;
  }

  @media (min-width: 800px) {
    padding: 1rem 2rem;
  }
  
`
...
#+end_src

Dado que se depende de una biblioteca, también hay patrones para necesidades comunes, tales como los estilos dinámicos. Si se dependiende del valor de un prop, se puede aplicar un estilo diferente de acuerdo a dicho valor. 

#+begin_src jsx
import styled from 'styled-components'

const Button = styled.button`
  color: white;
  background: ${props => props.secondary ? 'gray' : 'blue' };
`
#+end_src

A continuación se presentan las ventajas que ofrecen las bibliotecas CSS-en-JS:

- Uso de media quieries
- Uso de pseudo selectores
- Animaciones con keyframes
- Estilos y código co-localizados

Las desventajas son:

- Fatiga en la toma de decisiones para escoger una de estás librerías
- Anulaciones por cascada

En consclusión estos son los síntomas que determinan si resulta viable el uso de libreriías CSS-en-JS:

- Los estilos son co-localizados
- Requiere de todo el poder de CSS

* Hojas de estilos CSS

No hay mucho que presentar con esta técnica ya que es la forma tradicional de utilizar las hojas de estilos de CSS:

#+begin_src html
<link rel="stylesheet" href="/css/mystyles.css"/>
#+end_src

Con este enfoque se dispone de todas las capacidades de CSS y representa muy pocos cambios de la mayoría de los flujos de trabajo tradicionales. No obstante, como se disuction anteriormente, la técnica expone los 7 problemas que señalo Christopher Chedeau en su charla /React: CSS in JS/.

De dichos problemas, el mas relevante es el namespace global. Si se sigue este enfoque la recomendación es usar una notación como BEM (Bloque, Elemento y Modificador) para mitigar dicho inconveneniente.

Por lo tanto, esto son los puntos a favor de utilizar esta estrategia:

- No hay que aprender una nueva sintáxis
- Todo es CSS
- Se aprovecha la experiencia de la comunidad

En consecuencia, esta técnica resulta conveniente cuando:

- Se pretende aprvechar el status quo de CSS
- No se tienen procesos nuevos para estilos
- El equipo de trabajo se siente cómo con el CSS tradicional

* Módulos CSS

Los módulos CSS son una variación de las hojas de estilos tradicionales. Sesiente como el manejo de una hoja de estilos tradicional ya que los estilos se escriben en un archivo ~.css~, pero hay una diferencia esencial y es que la hojas de estilos es un módulo.

#+begin_src css
/* components-styles.module.css */
.button {
  color: white;
  background: blue;
  padding: 0.5rem 1rem;
  border-radius: 2px;
}

/* Este código pasa por un Module Bundler */

/* import * as css from './component-styles.module.css'
console.log(CSS) // { button: 'button-3dajc' }
*/

#+end_src

Esta técnica requiere de un paso de construcción hecho por una herramienta llamada /module bundler/ (e.g. webpack) la cual genera un objeto exportable. Dicho objeto se importa en donde se pretenda usar perimtiendo definir explicitamente las dependencias de los estilos:

#+begin_src jsx
import React from 'react';
import * as css from './component-styles.module.scss';

function myComponent(){
  return <button>className={css.button}Click me</button>
}
#+end_src

Los selectores del objeto exportable estarań disponbiles en este ámbito y serán referenciados cuando se usen en la propiedad ~className~ del componente React.

El otro factor diferenciador de esta técnica de módulos es que los nombres de los selectores CSS serán úncios luego del paso de construcción al agregar un hash como sufijo, previniendo así colisiones en el namespace global:

#+begin_src css
/* src */
.button {
  color: white;
  background: blue;
  padding: 0.5rem 1rem;
  border-radius: 2px;
}

/* compiled */
.button---5x98a {
  color: white;
  background: blue;
  padding: 0.5rem 1rem;
  border-radius: 2px;
}
#+end_src

Estas son las ventajas de utilizar módulos CSS:

- Se dispone de todo el poder de CSS
- Aislamiento a través de un sistema de módulos
- Las dependencias son explícitas

Estas son las desventajas de utilizar módulos CSS:

- No se pueden compartir constantes

En consecuencia la recomendación es usar esta ténica cuando se presenten los siguientes síntomas:

- Autoría en las hojas de estilos CSS para una mejor organización de estilos
- Administración de problemas CSS

* Conclusión

Estas son las técnicas mas populares para dar estilos en componentes React.
Se recalca que para un mayor dominio de las mismas es recomendable hacer implementaciones puntuales para empezar a identificar las diferencias entre cada una de ellas.

Todas las técnicas cumplen un resultado similar, pero su contexto de aplicación difiere en autorías, fortalezas y debilidades con las cuales el desarrollador deberá lidiar.

Por último, al presentar las técnicas estos escenarios empezaron a ser relevantes:

- Estilos estáticos
- Estilos dinámicos
- Anulación de estilos

Cada una participa de manera especifica con dicho contexto.
