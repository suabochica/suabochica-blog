#+TITLE: Compensaciones de React
#+DESCRIPTION: Serie que recopila una descripción general de React
#+AUTHOR: Sergio Benítez
#+DATE:<2021-03-02 Tue> 
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

React es una excelente librería pero no se debe dejar sesgar por su popularidad. La comunidad ha identificado 6 compensaciones claves a las que el desarrollador se expone por usar React. Dichos puntos serán desarrollados a continuación.

* Tradeoff 1: Frameworks vs. Librería

Los competidores de React, como Angular o Vue se ofertan en el mercado como frameworks y no como librerías. Fundamentalmente, considerar que un framework es mejor que una libreria es un tema de compensaciones.

A continuación se enlistan las ventajas de seguir un enfoque de framework:

- Los frameworks contienen opiniones más claras sobre su uso, y por ende se puede gastar menos tiempo tratando de escoger entre muchas opciones. Definitivamente esta característica reduce la fatiga en la toma de decisiones.
- Las opiniones claras sobre los usos de un framework también implican menos gastos en configuraciones.
- Los frameworks pueden reforzar la coherencia entre los miembros de un equipo

Por otro lado, el enfoque de librería de React también ofrece sus ventajas:

- React es mucho más ligero que la mayoría de los frameworks
- El peso bajo de React, permite que se pueda espolvorear sobre aplicaciones existentes. (e.g. El caso de Facebook que migró su aplicación PHP a React paulatinamente)
- React lo obliga a eligir solo las cosas que necesita para su trabajo. Al dar ese poder de elección en definitiva se puede escoger las mejores tecnologías.
- Actualmente, React cuenta con plantillas populares sobre las cuales se puede trabajar.

Como React es una librería enfocada a componentes, sus funcionalidades son muy limitadas si se compara con un framework como Angular. En la siguiente tabla se especifica como suplir las funcionalidades que por defecto ya estan incuildas en el framework: 

| Features        | React            | Angular     |
|-----------------+------------------+-------------|
| Components      | ✔                | ✔           |
| Testing         | Jest             | ✔           |
| HTTP library    | Axios            | ✔           |
| Routing         | React Router     | ✔           |
| i18n            | react-intl       | ✔           |
| Animation       | react-motion     | ✔           |
| Form validation | react-forms      | ✔           |
| CLI             | create-react-app | angular-cli |

Con React se puede halar solo los elementos que precisamos de la lista.
  
* Tradeoff 2: Conciso vs. Explícito

React obliga a gastar algo de tiempo en ser más explicíto al momento de cablear una lógica de presentación. Esta característica ayuda a que se obtenga un mejor entendimiento sobre lo que el código esta haciendo. Un ejemplo concreto es el /two-way binding/ contra el /one-way binding/.

Angular es popular por usar un enfoque de encuadernación bidireccional para sincronizar la actualización de datos con el evento que los dispara. El siguiente snippet es un ejemplo de como se regulizar datos en Angular.

#+begin_src javascript
let user = 'Cory';

<input
  type="text"
  value={user}
/>
#+end_src

Se puede observar que es un código corto, pero por debajo se están ejecutando diferentes procesos de manera automática para sincronizar los datos.

En contraste, React usa un enfoque de encuadernación unidireccional. A continuación se muestra un código de ejemplo que sería el equivalente a la muestra anterior, pero bajo el contexto de React:

#+begin_src javascript
state = { user: 'Cory' };

function handleChange(event) {
  this.setState({
    user. event.target.value
  });
}

<input
  type="text"
  value={this.state.user}
  onChange={this.handleChange}
/>
#+end_src

Notesé que en esta versión se es mucho mas descriptivo. Aquí se declara explícitamente un manejador del evento ~change~ que se referencia en uno de los atributos de la etiqueta ~<input>~. Este trabajo extra, tiene sus beneficios. El primero es que le ofrece al desarrollador más control en la implementación por que no hay código que se este ejecutando por defecto. Al ser más explícito, es evidente el cambio del estado generado por la ocurrencia de un evento, dando un mejor entendimiento de la lógics y haciendo más sencillo el proceso de depuración.

En resumen, esta es la compensación. Con React las implementaciones son más extensas pero el beneficio que generan es que resulta un código fácil de mantener, con mayor claridad, fiabilidad y rendimiento.

* Tradeoff 3: Centrado a plantillas vs. Centrado a JavaScript
* Tradeoff 4: Separación vs. Archivo único
* Tradeoff 5: Estándar vs. No estándar
* Tradeoff 6: Apoyo de comunidad vs. Apoyo corporativo
