#+TITLE: Configuraciones potenciales de CSS en React
#+DESCRIPTION: Serie que recopila el estado de arte del manejo de estilos en React
#+AUTHOR: Sergio Benítez
#+DATE:<2021-04-23 Thu> 
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

Dar estilos a los componentes React es divertido. Es tiempo de revisar las  herramientas que habilitan las diferentes configuraciones que son requeridas a nivel de proyecto.

Las cadenas modernas de heramientas para crear aplicaciones React a menudo no precisan configuraciones extensivas de CSS por defecto. Por ejemplo, ~create-react-app~ que ha sido el paquete que se ha venido utilizando en los proyectos para evaluar las diferentes estrategias para agregar estilos en components React, soporta toda la autoría CSS que se ha revisado hasta ahora. Inclusive, su configuración atiende muchos más detalles de los que se han contemplado por ahora. Por ejemplo, prepocesamiento de SASS y prefijos automaticos post-procesamiento.

En resumen, no es frecuente tener que lidiar con configuraciones CSS en los proyectos React. Sin embargo, al enfrentarse a casos como por ejemplo agregar un preprocesador PostCSS es necesario realizar configuraciones adicionales ya que es una funcionalidad que no esta incluida en la oferta del ~create-react-app~. Para ello, podemos acudir a las herramientas subyacentes de estructuración de proyectos:

- Webpack
- Rollup
- Parcel

Cada una de estas herramientas son paquetes de módulos. Un paquete de módulos es instrumento que toma archivos JavaScript, CSS y potencialmente otros tipos de archivos asegurando de que sean cargables y procesables  para luego empaquetarlos en un archivo de aplicación listo para el navegador.

Ahora bién ¿qué es un módulo? para un paquete de módulos, cada bit de código luce como un módulo. Ya sea JavaScript, una hoja de estilos, una imagen, entre otros.

Para este caso puntual se va a crear un proyecto React corriendo con PostCSS. PostCSS is un procesador de CSS que agrega habilidades a CSS. Una de las habilidades es la anidación de selectores. Estos ejemplos pueden ser de gran ayuda para la próxima vez que se necesite echar un vistazo bajo el capo y ajustar la configuración CSS de un proyecto React.

* Webpack

Webpack es quizas la herammienta más común entre los agrupadores de módulos, y es utilizada por ~create-react-app~. En sí, estas herramientas son muy flexibles pero requieren una significativa cantidad de configuración.

La mejor forma de entender las configuraciones de estas herramientas es revisando el archivo ~package.json~:

#+begin_src json
  "scripts": {
      "build": "webpack",
      "start": "sirv public",
  },
  "devDependencies": {
      "@babel/core": "^7.9.0",
      "@babel/preset-react": "^7.9.4",
      "babel-loader": "^8.1.0",
      "css-loader": "^3.5.3",
      "postcss-loader": "^3.0.0",
      "postcss-nesting": "^7.0.1",
      "react": "^16.13.1",
      "react-dom": "^16.13.1",
      "sirv-cli": "^0.4.5",
      "style-loader": "^1.2.0",
      "webpack": "^4.43.0",
      "webpack-cli": "^3.3.11"
  }
#+end_src

A continuación se explican cada uno de los paquetes que hacen parte del ~devDependencies~ del archivo ~package.json~. Por ahora se empezará con los paquetes relativos a webpack en sí y un paquete que habilita un servidor web local:

- ~sirv-cli~: paquete que permite crear un servidor web para publicar los activos estaticos en un directorio público
- ~webpack~: paquete que contiene la funcionalidad para el module bundling.
- ~webpack-cli~: paquete que permite correr el module bundling desde una lína de comandos.

Un detalle importante es la propiedad ~scripts~ para ejecutar comandos con propósitos puntuales:

- ~"build": "webpack"~:  script que ejecuta webpack y genera el ~bundle.js~
- ~"start": "sirv public"~: script que levanta un servidor local a través del paquete ~sirv~

Si se ejecuta el comando ~npm run build~ con una configuración básica de puntos de entrada y salida, se recibirá un mensaje de error que demanda el uso de un /loader/ para poder manejar determinado tipo de archivo. Los loaders son los bits mágicos dentro del contexto de webpack y se resalta que existen varios de ellos para atender un tipo de archivo puntual, como por ejemplo archivos JavaScript o CSS. Para este caso vamos a instalar los siguientes loaders:

- ~babel-loader~
- ~css-loader~
- ~postcss-loader~
- ~style-loader~

Ahora bien, para que un loader funcione a cabalidad es preciso configurar las herramientas que invocan. La siguiente es la lista de dependencias para ~babel-loader~:

- ~@babel/core~: Paquete para soportar funcionalidades extra de JavaScript.
- ~@babel/preset-react~: Extensión del core de babel para tener soporte sobre React JSX.

Por último, se define un archivo ~babel.config.js~ con el siguiente contenido:

#+begin_src js
// babel.config.js
module.exports = {
  presets: ["@babel/preset-react"],
};
#+end_src

Finalmente, babel esta listo.

Este ciclo de configuración se aplica nuevamente para postcss. Se empieza con las dependencias:

- ~postcss-nesting~: Plugin que soporta la anidación de selectores

Se procede con un archivo de configuración ~postcss.config.js~

#+begin_src js
// postcss.config.js
module.exports = {
  plugins: {
    'postcss-nesting': {}
  }
};
#+end_src

Y con esto, postcss está listo.

Toda configuración en webpack parte desde el archivo ~webpack.config.js~, cuyo contenido para este caso se muestra a continuación:

#+begin_src js
// webpack.config.js
const path = require("path");

module.exports = {
  mode: "development",
  entry: "./src/index.js",
  output: {
    path: path.resolve(__dirname, "public"),
    filename: "bundle.js",
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
        },
      },
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader", "postcss-loader"],
      },
    ],
  },
};
#+end_src

Como se puede observar, el archivo de configuración es un único módulo de exportación. Dentro de este objeto se define como webpack debe actuar.

Al ser un module bundler, webpack tomará módulos fuente y los empaqueta en conjunto dentro de un ~app bundle~. Para ello hay unas propiedades importantes a tomar en cuenta:

- ~entry~: propiedad que determina el punto de entrada a la aplicación
- ~output~: propiedad que determina el punto de salida del ~app bundle~
- ~module.rules~: propiedad que determina la relación entre los tipos de archivo y los loaders.

Se señala que un tipo de archivo puede tener varios loaders asociados, como es el caso de los archivos CSS en esta configuración. Aquí, el orden en como se suministran los loaders es releavante, puesto que se leen de derecha a izquierda. En dicha secuencia la salida del loader previo se perfila como la entrada del siguiente loader.

Es así como se procesan las funcionalidades adicionales PostCSS en CSS. Primero se evaluan las caracteristicas de PostCSS con su respectivo loader. Este resultado es la entrada para el ~css-loader~ que administrará las referencias a archivos CSS dentro del proyecto JavaScript, y por último el ~style-loader~ recibe dicho resultado para hacer la inserción de los estilos en la etiqueta ~<style>~ de la página al momento de ejecutar la aplicación.

Al correr nuevamente ~npm run build~ se generara un archivo ~public/bundle.js~. Para poder visualizar la aplicación se ejecuta el script ~start~ y así el resultado estará disponible.
  
* Rollup

Rollup es otro empaquetador de módulos que tiene un enfoque muy similar a webpack, pero su configuración difiere en cosas muy puntuales. Para el mimso proyecto este es ahora el archivo ~package.json~:

#+begin_src json
  "scripts": {
    "build": "rollup --config",
    "start": "sirv public",
  },
  "devDependencies": {
    "@babel/core": "^7.9.0",
    "@babel/preset-react": "^7.9.4",
    "@rollup/plugin-babel": "^5.0.0",
    "@rollup/plugin-commonjs": "^11.1.0",
    "@rollup/plugin-node-resolve": "^7.1.3",
    "@rollup/plugin-replace": "^2.3.2",
    "postcss-nesting": "^7.0.1",
    "react": "16.13.1",
    "react-dom": "16.13.1",
    "rollup": "^2.7.3",
    "rollup-plugin-postcss": "^3.1.1",
    "sirv-cli": "^0.4.5"
  }
#+end_src

El paquete ~rollup~ contiene todo el core del module bundler.

Por otra parte, la configuraciones de rollup serán especificadas en el archivo ~rollup.config.js~, un único objeto de exportación cuyas propiedades se muestran a continuación.

#+begin_src js
// rollup.config.js
import babel from "@rollup/plugin-babel";
import commonjs from "@rollup/plugin-commonjs";
import postcss from "rollup-plugin-postcss";
import replace from "@rollup/plugin-replace";
import resolve from "@rollup/plugin-node-resolve";

import * as path from "path";

export default {
  input: "src/index.js",
  output: {
    file: path.resolve(__dirname, path.join("public", "bundle.js")),
  },
  plugins: [
    babel({
      babelHelpers: "bundled",
      exclude: "node_modules/**",
    }),
    commonjs(),
    postcss(),
    replace({
      "process.env.NODE_ENV": JSON.stringify("production"),
    }),
    resolve(),
  ],
};
#+end_src

De igual forma que en Webpack, las propiedades para determinar el punto de partida y de salida del bundler son ~input~ y ~output~ respectivamente. La configuación cambia con la propiedad ~plugins~, que sería el equivalente al ~module.rules~ de webpack. Es aquí donde se especifíca como Rollup debería procesar los archivos. En terminos concretos, los plugins son equivalentes a los loaders de Webpack. La lista de plugins para este ejemplos es:

- ~@rollup/plugin-babel~: complemento para soportar la sintáxis JSX.
- ~@rollup/plugin-commonjs~: complemento para soportar exportaciones por defecto de react.
- ~@rollup/plugin-node-resolve~: complemento que le permite a Rollup importar módulos con nombres, como React.
- ~@rollup/plugin-replace~: complemento que ayudará a readactar la detección del entorno React que usa el proceso de NodeJS el cual no esta disponible en el navegador.
- ~rollup-plugin-postcss~: complemento para soportar la funcionalidad de selectores anidados de PostCSS.

Como se puede evidenciar en el archivo ~rollup.config.js~, los complementos de Rollup son funciones que son llamadas dentro del arreglo ~plugins~. En los casos puntuales de ~babel~ y ~replace~ estas funciones reciben como argumento un objeto cuyas propiedades son definiciones puntuales para habilitar procesamientos en el complemento.

Para un correcto funcionamiento de Babel y PostCSS se replican los archvios ~babel.config.js~ y ~postcss.config.js~ que se revisaron en la sección de Webpack.

Al correr ~npm run build~, Rollup generará un archivo ~public/bundle.js~. Para poder visualizar la aplicación se ejecuta el script ~start~ que habilitará un servidor web vía ~sirv-cli. Con esto se exploraron los conceptos básicos para hacer una configuración básica de un proyecto React con PostCSS.

* Parcel

Parcel esta diseñado para ser un bundler todo en uno. Hace muchos procesos fuera de la caja y requiere menos pasos de configuración. Considerando las configuraciones previas en Webpack y Rollup, la propuesta de Parcel puede ser encantadora.

En primera instancia, así luce el archivo ~package.json~ con Parcel:

#+begin_src json
  "scripts": {
      "start": "parcel public/index.html -p 5000",
  },
  "devDependencies": {
      "parcel-bundler": "^1.12.4",
      "postcss-nesting": "^7.0.1",
      "react": "^16.13.1",
      "react-dom": "^16.13.1",
  }
#+end_src

Es un archivo con menos dependencias a lo que se reviso previamente. El paquete ~parcel-bundler~ contiene todo el core de este empaquetador de módulosy un cliente de línea de interfaz para la ejecución de comandos. Algo interesante de esta propuesta es el script ~start~. A diferencia de Webpack y Rollup, en donde el punto de entrada de la aplicación era un archivo JavaScript, en Parcel se define el punto de entrada en un archivo HTML, como muestra el contenido del script ~start~. Dentro de este mismo script se especifica el puerto sobre el que se va a hospedar la aplicación indicando que Parcel por si mismo ofrece la posibilidad de levantar un servidor web. En resumen, Parcel ademas de empaquetar los módulos también esta en capacidad de ofrecer un servidor web de desarrollo para hospedar la aplicación.

Ahora bien, retomando el hecho de que el punto de entrada de la aplicación es un archivo HTML, se debe hacer un pequeño ajuste sobre el consumo del archivo bundle compilado. En vez de especificar el archivo ~bundle.js~ generado por las herramientas anteriores, se define la ruta ~../src/index.js~. De esta forma el archivo HTML termina siendo un puente para llegar al archivo de entrada JavaScript.

Por otra parte, el soporte a la sintáxis JSX ya está implicita en parcel, es por esta razón que no se precisa de la instalación de los paquetes preestablecidos de Babel y por ende un archvio ~babel.config.js~ no es necesario. 
En cuanto al procesamiento de PostCSS, Parcel también asume esa responsabilidad pero requiere que se especifique que plugnos de PostCSS se van a usar, es por esta razón que en el ~packcage.json~ esta presente el paquete ~postcss-nesting~. De manera complementaria, se crea un archivo ~parcel.config.js~ con el siguiente contenido:

#+begin_src js
module.exports = {
  plugins: {
    'postcss-nesting': {}
  }
}
#+end_src

#+RESULTS:
: undefined

En con esto ya estaría lista nuestra aplicación. Si se ejecuta el comando ~npm run start~ el archivo empaquetado es interpretado por Parcel y se carga un servidor web para consultar el resultado.

Para configuraciones sencillas, de proyecto pequeños, Parcel es una buena opción.
