#+TITLE: Instalando Storybook
#+DESCRIPTION: Serie que recopila los beneficios de usar Storybook
#+AUTHOR: Sergio Ben√≠tez
#+DATE:<2021-01-11 Mon> 
#+STARTUP: fold


* Instalando Storybook

Antes de instalar Storybook es necesario instalar [[https://nodejs.org/en/][NodeJS]]. Para validar si se
tiene instalado el runtime se puede ejecutar el siguiente comando:

#+begin_src
$ node -v
v12.0.1
#+end_src

Una vez instalado NodeJS, se inicializa un proyecto NodeJS corriendo el
siguiente comando:

#+begin_src
$ npm init -y
Wrote to /mnt/c/Users/suabochica/Development/suabochica-storybook/package.json:

{
  "name": "suabochica-storybook",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/suabochica/suabochica-storybook.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/suabochica/suabochica-storybook/issues"
  },
  "homepage": "https://github.com/suabochica/suabochica-storybook#readme"
}
#+end_src

Con el proyecto NodeJS creado es momento de instalar algunas dependencias para
correr Storybook con React. En ese orden de ideas, se ejecuta este comando:

#+begin_src
$ npm i -s react react-dom
#+end_src

~i~ es una abreviatura de ~install~ y ~-s~ es una opci√≥n para indicar que el
paquete se instale en la secci√≥n ~dependencies~ del archivo ~package.json~.

Tiempo de instalar Storybook con soporte para React:

#+begin_src
$ npm i @storybook/react -D
#+end_src

~-D~ es una opci√≥n para indicar que el paquete se instale en la secci√≥n
~devDependencies~ del archivo ~package.json~.

El √∫ltimo paquete que se va a instalar para resolver temas de traspilaci√≥n es
~babel-loader~:

#+begin_src
$ npm i babel-loader @babel/core -D
#+end_src

Una vez instalado todos los paquetes es tiempo de definir un script dentro del
archivo ~package.json~ para inicializar el servidor de Storybook. El siguiente
es un ejemplo del ~package.json~ con el script configurado:

#+begin_src json
{
  "name": "suabochica-storybook",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "storybook": "start-storybook"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "react": "^17.0.1",
    "react-dom": "^17.0.1"
  },
  "devDependencies": {
    "@babel/core": "^7.12.10",
    "@storybook/react": "^6.1.14",
    "babel-loader": "^8.2.2"
  }
}
#+end_src

Por √∫ltimo, se debe crear un directorio con un archivo de configuraci√≥n en la
siguiente ruta ~.storybook/config.js~. El contenido de dicho archivo es:

#+begin_src js
import { configure } from "@storybook/react";

function loadStories() {
    const req = require.context('../stories', true, /\.stories\.js$/);

    req.keys().forEach(filename => req(filename));
}

configure(loadStories, module);
#+end_src

B√°sicamente se esta indicando que todos los archivos dentro de la carpeta
~/stories~ son requeridos para la cargar las historias dentro de Storybook.
Esto implica la creaci√≥n del drectorio ~/stories~ que por ahora puede estar
vacio.

Tiempo de probar la instalaci√≥n ejecutando el script de Storybook:

#+begin_src
$ npm run storybook
#+end_src

Si se imprime la siguiente salida:

#+begin_src
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                                                      ‚îÇ
‚îÇ   Storybook 6.1.14 started                           ‚îÇ
‚îÇ   36 s for preview                                   ‚îÇ
‚îÇ                                                      ‚îÇ
‚îÇ    Local:            http://localhost:9001/          ‚îÇ
‚îÇ    On your network:  http://192.168.224.161:9001/    ‚îÇ
‚îÇ                                                      ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
#+end_src

Significa que la instalaci√≥n ha sido exitosa

** Errores
Eseta configuraci√≥n no funciona con la version 13.3.0 de node. Al correr el
comando ~npm run storybook~ se obtiene el siguiente error:

#+begin_src
suabochica-storybook on ‰≥≠ main [!?] is üì¶ v1.0.0 via ‚¨¢ v13.3.0 took 1m36s
‚ùØ npm run storybook

> suabochica-storybook@1.0.0 storybook /mnt/c/Users/suabochica/Development/suabochica-storybook
> start-storybook -p 9001

internal/modules/cjs/loader.js:621
  throw e;
  ^

Error: No valid exports main found for '/mnt/c/Users/suabochica/Development/suabochica-storybook/node_modules/colorette'
    at resolveExportsTarget (internal/modules/cjs/loader.js:618:9)
    at applyExports (internal/modules/cjs/loader.js:499:14)
    at resolveExports (internal/modules/cjs/loader.js:548:12)
    at Function.Module._findPath (internal/modules/cjs/loader.js:650:22)
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:948:27)
    at Function.Module._load (internal/modules/cjs/loader.js:854:27)
    at Module.require (internal/modules/cjs/loader.js:1023:19)
    at require (internal/modules/cjs/helpers.js:72:18)
    at Object.<anonymous> (/mnt/c/Users/suabochica/Development/suabochica-storybook/node_modules/autoprefixer/lib/autoprefixer.js:5:17)
    at Module._compile (internal/modules/cjs/loader.js:1128:30) {
  code: 'MODULE_NOT_FOUND'
}
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! suabochica-storybook@1.0.0 storybook: `start-storybook -p 9001`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the suabochica-storybook@1.0.0 storybook script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/suabochica/.npm/_logs/2021-01-12T17_17_11_966Z-debug.log
#+end_src

La soluci√≥n es actualizar la versi√≥n de node ala 14.15.4

* Agregando Storybook a un proyecto existente

Para agregar Storybook en un proyecto existente, que generalmente debe estar
bajo un sistema de control de versiones distribuido como git, tan solo se debe
ejecutar el siguiente comando:

#+begin_src
$ npx -p @storybook/cli sb init
#+end_src

~npx~ es un corredor de paquetes que le permite ejecutar herramientas CLI que
est√°n alojadas en el registro de node. Con este comando, Storybook realizar√° los
siguientes pasos:

1. Detectar√° el tipo de proyecto (e.g. React)
2. Agregar√° soporte sobre Storybook para la aplicaci√≥n actual.
3. Instalar√° las dependencias pertinentes.

Si no ahy ning√∫n percance la salidar de este comando le indicara ejecutar el
siguiente comando:

#+begin_src
$ npm run storybook
#+end_src

Este comando constuye y lanzar√° el sandbox de Storybook en su navegador. Tras
bambalinas, el comando inicial lo que hace es crear las carpetas ~/.storybook~ y
~/stories~ con una configuraci√≥n por defecto, muy parecida a la que se comparti√≥
en la secci√≥n anterior. Adicionalmente, instala las dependencias de Storybook en
funci√≥n al tipo de proyecto y agrega los scripts para lanzar y construir el
sandbox de Storybook.

* Aplicaciones de ejemplo

La empresa Carved Rock Fitness lo ha contratado para que usted colabore con la
construcci√≥n de un e-commerce. Actualmente la compa√±ia cuenta con un home page
como el que se muestra a continuaci√≥n:

#+CAPTION: Web Components on a homepage
[[../images/storybook/01-storybook-interface.png]]

En rojo se resaltan algunos elementos UI del sitio web: una barra de men√∫, un
avatar, una barra de b√∫squeda, etc. La mayoria de estos elementos pueden
reutilizarse a lo largo de toda la aplicaci√≥n y perfilarlos como candidatos para
convertirlos en componentes. Adicionalemnte, algunos precisar√°n de una
documentaci√≥n para determinar como y cuando deben ser utilizados.

Actualmente, Carved Rock Fitness tiene los dise√±os de dos p√°ginas adicionales;
la p√°gina de producto y la p√°gica del carrito de compras. No obstante est√°s
p√°ginas no han sido implementadas a√∫n.

Alguno elementos como la barra de men√∫ y el avatar se repiten en estos bosquejos.
Sin embargo hay nuevos elementos en estos dise√±os, como por ejemplo,
contadores para determinar la cantidad y el tama√±o del producto, que al final
podri√°n ser el mismo componente con la variaci√≥n de que para la cantidad se usan
n√∫meros y para el tama√±o se usan textos. Por otra parte est√° el bot√≥n de agregar
al carrito, cuyos estilos pueden ser reutilizados en otras p√°ginas.

El punto es que cada uno de los bosquejos son una oportunidad para luchar en
contra de los problemas de comunicaci√≥n entre los roles que participan en la
construcci√≥n del sitio web, promoviendo un camino que parte desde la frustaci√≥n y
se dirige hacia la colaboraci√≥n de equipo, convirtiento estos elementos de UI,
en componentes y por √∫ltimo en historias. Una vez se consoliden las historias,
el equipo estar√° en capacidad de validar si las implementaciones coinciden con
los dise√±os establecidos.
