#+TITLE: Datos en Blockchain
#+DESCRIPTION: Serie que recopila una aprendizaje sobre blockchain
#+AUTHOR: Sergio Benítez
#+DATE:<2021-11-17 Wed> 
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

En esta publicación se usará Bitcoin Core para explorar las limitaciones y las mejores prácticas al incorporar datos en transacciones de blockchain.

Los propósitos puntuales de esta sección son:

- Reconocer la estructura de datos de bloques y transacciones.
- Reconocer el propósito de los códigos de operación de Bitcoin Script que se usan comúnmente en las partes de entrada y salida de un proceso de transacción.
- Explorar las limitaciones y las mejores prácticas para incorporar datos en transacciones de blockchain.

¡Usar estas habilidades lo ayudará con la con la construcción de los componentes de su propia cadena de bloques simple y privada desde cero!

* Modelos de datos en Blockchain

Para entender como la información es almacenada en cualquier blockchain, es necesario aclarar los modelos de datos del bloque y la transacción. Anteriormente se mencionó que el modelo de dato de un bloque se comopone de:

- Un encabezado
- Un cuerpo

El encabezado de bloque almacena la siguiente información:

- *Hash del bloque anterior:* el valor hash del bloque que viene directamente antes de un bloque determinado en la cadena. Esto es lo que une los bloques en el blockchain
- *Hora:* la hora en que se creó el bloque también se mantiene en el encabezado.
- *Raíz de Merkle:* la raíz de Merkle es un hash que representa cada transacción incluida dentro del bloque. Para obtener la raíz de merkle, los pares de transacciones dentro de un bloque se mezclan repetidamente. Cada par da como resultado un solo hash. Luego, el hash de dos pares de transacciones se vuelve a mezclar con otros dos pares hash, una y otra vez hasta que se llega a un solo valor hash, el cuál sería la raíz del árbol. Con ese valor hash final, conocido como raíz merkle, se pueden buscar las transacciones originales o los valores hash que las crearon incluyendo los primeros bloques del blockchain.
- *Nonce:* un nonce (significa "número que solo se usa una vez") es un número que se usa en la minería de bitcoin. Los mineros de la cadena de bloques están resolviendo el nonce que, cuando se agrega a un bloque con hash, y esos 2 valores se repiten, resolverán el rompecabezas de la minería.

Por otra parte, el cuerpo del bloque se encarga de las transacciones, incluyendo las entradas y las salidas de las mismas. en la siguiente sección se expandirá el modelo de datos de las transacciones haciendo enfásis en la entradas y las salidas ya que su relación permite el entendimiento de la creación de transacciones propias. No importa que blockchain este trabajando, recuerde que las cadenas de bloques son sistemas transaccionales.

* Transacciones

** Entrada y Salidas

Las transacciones codifican la transferencia de valor entre los participantes en el sistema. Más detalladamente, una transacción es una estructura de datos que codifica una transferencia de valor desde una fuente de fondos llamada "entrada" a un destino llamado "salida".

Las entradas en una transacción son solo las salidas no gastadas de otra transacción. Todas las entradas hacen referencia a una salida. Recuerde que las salidas no utilizadas se referencian como UTXO por sus sigral en inglés. La siguiente imagen nos ilustra la relación entre las entradas y las salidas de un par de transacciones:

#+CAPTION: Private and Public Keys Relationship
[[../../images/blockchain/17-transactions-inputs-outputs.png]]

Conceptualice la flecha como un puntero de las entradas que hacen referencia a las salidas de las que provienen. Esto es similar a los punteros en una lista enlazada. Descubrirá que esta es una notación de flecha estándar, las entradas apuntan hacia sus salidas.

Tiempo de revisar el modelos de datos de las transacciones.

** Modelo de Datos en las Transacciones

Esta es una la transacción sin procesar:

#+begin_src 
0100000001f3f6a909f8521adb57d898d2985834e632374e770fd9e2b98656f1bf1fdfd427010000006b48304502203a776322ebf8eb8b58cc6ced4f2574f4c73aa664edce0b0022690f2f6f47c521022100b82353305988cb0ebd443089a173ceec93fe4dbfe98d74419ecc84a6a698e31d012103c5c1bc61f60ce3d6223a63cedbece03b12ef9f0068f2f3c4a7e7f06c523c3664ffffffff0260e31600000000001976a914977ae6e32349b99b72196cb62b5ef37329ed81b488ac063d1000000000001976a914f76bc4190f3d8e2315e5c11c59cfc8be9df747e388ac00000000
#+end_src

Nada legible para cualquier persona. La siguiente imagen se resume el modelo de datos de dicha transacción:

#+CAPTION: Transaction Data Model
[[../../images/blockchain/18-transactions-data-model.png]]

Como se puede observar, la convención de colores nos permite identificar los componentes del modelo de datos de una transacción.

Se aclara que una transacción en el blockchain de Bitcoin es almacenado en forma de doble hash:

#+begin_src 
SHA256(SHA256(01000…)) = b138360800cdc72248c3ca8dfd06de85913d1aac7f41b4fa54eb1f5a4a379081
#+end_src

Para explorar los contenidos de una transacción de forma legible se puede utilizar [[https://live.blockcypher.com/btc/tx/b138360800cdc72248c3ca8dfd06de85913d1aac7f41b4fa54eb1f5a4a379081/][BlockCypher]]. Ahora bien, es tiempo de desglozar la transacción en bruto:

#+CAPTION: Raw Transaction Breakdown
[[../../images/blockchain/19-bitcoin-scripts.png]]


- *Versión:* todas las transacciones incluyen información sobre el número de versión de Bitcoin para que sepamos qué reglas sigue esta transacción.

- *Recuento de entradas:* cuántas entradas se usaron para esta transacción

*** Datos almancenados en la información de entrada
- *Hash de salida anterior:* todas las entradas hacen referencia a una salida (UTXO). Esto apunta de nuevo a la transacción que contiene la UTXO que se gastará en esta entrada. El valor hash de este UTXO se guarda aquí en orden inverso.
- *Índice de salida anterior:* la transacción puede tener más de un UTXO a los que se hace referencia por su número de índice. El primer índice es 0.
- *Tamaño del script de desbloqueo:* este es el tamaño del script de desbloqueo en bytes.- *Script de desbloqueo:* este es el hash del Script de desbloqueo que cumple las condiciones del Script de bloqueo de UTXO.
- *Número de secuencia:* esta es una función obsoleta de bitcoin, actualmente configurada en ffffffff de forma predeterminada.

*Recuento de salidas:* que nos dice cuántas salidas se produjeron a partir de esta transacción.

*** Datos almancenados en la información de salida
- *Cantidad:* la cantidad de Bitcoin generada en Satoshis (la unidad de bitcoin más pequeña). 10^8 Satoshis = 1 Bitcoin.
- *Tamaño del script de bloqueo:* este es el tamaño del script de bloqueo en bytes.
- *Script de bloqueo:* este es el hash del Script de bloqueo que especifica las condiciones que se deben cumplir para gastar esta salida.

*Tiempo de bloqueo:* el campo de tiempo de bloqueo indica la hora más temprana o el bloque más temprano que se puede agregar una transacción a la cadena de bloques. Si el tiempo de bloqueo no es cero y es inferior a 500 millones, se interpreta como una altura de bloque y los mineros deben esperar hasta que se alcance esa altura de bloque antes de intentar agregarlo a un bloque. Si el tiempo de bloqueo es superior a 500 millones, se lee como una marca de tiempo UNIX, lo que significa la cantidad de segundos desde la fecha del 1 de enero de 1970. Por lo general, es 0, lo que significa que se debe confirmar lo antes posible.

** Opcodes 

Los códigos de operación, abreviados como opcodes, son parte del scripting de Bitcoin y cuenta con apróximadamente 80 instrucciones. Hay que tener presente que el scripting de Bitcoin es un lenguaje basado en pila y los opcodes habilitan la interacción con los datos dentro de la pila. Las instrucciones más populares en un manejo de pilas son ~PUSH~ y ~POP~ para empujar o retirar parámetros de la pila respectivamente. Todos estos códigos empiezan con el prefijo ~OP_~ y la acción a ejecutar. La lista de opcodes para Bitcoin la puede consultar [[https://en.bitcoin.it/wiki/Script][aquí]]. Ahora bien, para familiarizarse con la ejecución de los opcodes se explica el siguiente script:

#+begin_src
  2 6 OP_ADD 8 OP_EQUAL
#+end_src

El resultado de ese script es el valor booleano TRUE, y a continuación se comparte el paso a paso de como se ejecuta el script. Es importante señalar que los scripts se ejecutan de izquierda a derecha:

1. ~PUSH 2~ empuja el 2 en la pila [2]
2. ~PUSH 6~ empuja el 6 en la pila [2 6]
3. ~OP_ADD~ retira el 2 y el 6 de la pila; los suma para obtener el 8 y lo empuja a la pila [8]
4. ~PUSH 8~ empuja el 8 en la pila [8 8]
5. ~OP_EQUAL 8~ retira ambos 8, los compara para la evaluación y empuja el TRUE a la pila [TRUE].

Estos scripts son usados para bloquear las salidas de las transacciones. La parte del ~6 OP_ADD 8 OP_EQUAL~ se conoce cmo el /locking script/ mientras que el ~2~ se conoce como el /unlocking script/. Si la ejecución del script es TRUE significa que la transacción es válida y el UTXO puede ser gastado por cualquier minero que identifica que el número ~2~ desbloquea el script. Este ejemplo es para familiarizarse con el proceso, ya que en la aplicación real de Bitcoin las llaves pública se incluyen como parte del script, tenienfo algo como:

#+begin_src
  <sig> <pubKey> OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
#+end_src

En donde ~<sig> <pubKey>~ es el unlocking script y el ~OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG~ es el locking script.

** Atributos de un Script

Los dos atributos de un script son:

- Incompletud de Turing
- Verificación sin estado

Cuando se habla de que un script con incompletud de Turing significa que no maneja bucles o estructuras de control complejas. Por otra parte es completamente determinístico, es decir, se sabe cuando y como el programa va a terminar. Así se remueve el miedo a que una ejecución de un script termine en un bucle infinito o rompa le red de la cadena de bloques. Por último al tener un lenguaje limitado se previene a que la validación de transacciones sea objetivo de ataques ya que lo hace un sistema simple y seguro.

En cuanto a la verificación sin estado, el script debe contar con toda la información necesaria para ser ejecutado y ningún estado debe guardarse antes o después de que el script se ejecute. Así se tiene garantías de que el mismo script puede ser utilizado en diferentes sistemas.

* Ciclo de Vida de una Transacción en Blockchain

Ahora que se tiene conocimiento de las partes de una transacción cruda, es tiempo de usar el protocolo de Bitcoin para construir nuestra propia transacción cruda.

Como se ha visto, la billetera principal de Bitcoin permite aprovechar muchas funciones del protocolo de Bitcoin, pero estas se limitan cuando accedemos a través de una interfaz gráfica de usuario.

Para aprovecar al máximo el potencial del protocolo, se debe omitir la interfaz gráfica de usuario y trabajar directamente con el protocolo.

Esto te ayudará a saber que comandos implementar al crear tu propia cadena de bloques privada que pueda realizar transacciones y asegurar el bloque con una firma digital.

A continuacións se comparten los pasos que debe seguir una transacciones en Blockchain.

- Paso 1: ver todos los UTXO confirmados no gastados en la billetera.
- Paso 2: ver detalles sobre un UTXO específico.
- Paso 3: crear una transacción sin procesar.
- Paso 4: decodificar la transacción sin procesar (para verificar que se realizó correctamente).
- Paso 5: firmar la transacción sin procesar.
- Paso 6: enviar la transacción sin procesar a la red.
- Paso 7: consultar el TxID de la transacción que enviamos.

Una cosa a tener en cuenta es que estos pasos siguen el flujo del ciclo de vida de la transacción.

* Incustar datos en transacciones

El Blockchain es una base de datos donde no es posible editar o borrar información. Las acciones que se tienen son /leer/, /adjuntar/ y /validar/ los datos.

Esta característica da beneficios sobre un registro de históricos preciso y hace más rápida la lectura y escritura de estos registros. No obstante, hay una desventaja y es que se debe llegar a un consenso con los registros.

Una pregunta válida es si además de datos transaccionales, se pueden guardar otro tipo de datos en el Blockchain. El protocolo como tal no esta diseñado para almacenar datos que no sean transaccionales. No obstante, para agregar otro tipos de datos, estos deben incluirse dentro de la transacción. Es por eso que Blockchain es utilizado en el manejo de datos financieros.

El hecho de incluir datos de almacenamiento dentro de las transacciones nos expone a riesgos y problemas. Es por eso que hay que tener varias consideraciones antes de almacenar datos en un blockchain público.

* PROJ Incrustar datos en el Blockchain

En los primeros días de la comunidad Bitcoin, los miembros probaron diferentes formas para obtener alguna ventaha de la irreversibiidad de los datos almacenados en el blockchain.

Reslovieron incluir la información en el valor del atributo ~scriptSig~ para no alterar el resultado final del script ejecutado. Los usuario pueden tomar estos datos, convertirlos en un hash y luego incorporarlo en la salida.

Ahora podemos manejar cualquier tipo de datos, desde fotografías de oradores de Nelson Mandela ofrecidas a los mineros que aman tener notas alamcenadas permanentemente on el blockchain.

No obstante, este enfoque desperto algunos objetores que argumentaban que dicho almacenamiento sobrecargaba la cadena de bloques por que estaba forzando a los nodos de Bitcoin a pagar el costo del almacenamiento de datos que no debería pagar, ya los UTXO tienen scripts de bloqueo que no pueden desbloquearse, para evitar que el UTXO se remueva y dicha información se almacena para siempre en los nodos de Bitcoin.

Es por esta razón que los desarrolladores Bitcoin introdujeron el Opcode ~OP_RETURN~  que permita usar 40 bytes en una transacción prescindible para de esta forma, se evita la necesida de almacenarlos en el conjunto UXTO. A pesar de que las salidas del ~OP_RETURN~ se registrand en la cadena de bloques usando memoria, estos no son almacenados en el conjunto UXTO evitando la carga adicinal del fondo de memoria del UXTO.

Los datos que usan el ~OP_RETURN~ es guardado en el script en este formato: ~OP_RETURN<data>~. A menudo es el resultado desde un hashsing SHA256. La siguiente imagen especifica en que parte de la transacción se incorporan el ~OP_RETURN~:


#+CAPTION: Raw Transaction OP_RETURN
[[../../images/blockchain/20-bitcoin-op-return.png]]

Los datos resaltados en la imagen son hasheados en formato hexadecimal, el cual puede convertirse en un string y ver el resultado final "charley loves heidi".

Hemos visto como es posible incrustar datos en el blockchain, y una pregunta válida es si ¿este proceso ético y debería hacerse? este tema se desarrollará en la siguiente sección.
