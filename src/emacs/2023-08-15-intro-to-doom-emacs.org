#+TITLE: Intro to Emacs Doom
#+DESCRIPTION: En esta publicación se comparte una breve guía con los primeros pasos a dar en doom emacs
#+AUTHOR: Sergio Benítez
#+DATE:<2023-08-15 Mon>
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

En definitiva, una de las curvas de aprendizaje más altas a las que me he enfrentado es la introducción al mundo de Emacs. El objetivo es compartir los conceptos de primer nivel para empezar a ganar productividad como desarrollador en el uso de este editor inmenso (a veces referenciado como sistema operativo)

Es importante dar una batalla inicial intentando construir tus propios dotfiles desde cero, y posteriormente evaluar si los paquetes de configuraciones como Doom o Spacemacs se ajustan a tus necesidades.

Doom es una propuesta liderada por Henrik Lissner, construida sobre el EvilMode. Esto significa que las configuraciones están pensadas para que los usuarios del editor VI se sientan como en casa.

Para empezar, por favor asegurarse de tener instalaldo Emacs en tu sistema operativo y luego sigue la guía de instalación de Doom:

** Filosofía de la encuadernación de llaves de Emacs

Hay tres conceptos básicos para la encuadernación de llaves (key bindings en inglés) y son: modificadores/modifiers, acordes/chords y sencuencias/sequences.

Una clave *modificadora* es cualquiera de las claves que se muestran en la siguiente imagen.

  #+CAPTION: Emacs Modifiers
  [[../../images/emacs/01-emacs-modifiier.png]]

Cualquier otra cosa es una llave no-modificadora.

Un *acorde* se compone de cero o más teclas modificadoras pulsadas al mismo tiempo. Por ejemplo, el "C-x" es un acorde para presionar Ctrl y "x" al mismo tiempo y luego liberarlos. "C-s-v" es un acorde para presionar Ctrl, Comando (o Windows) y "v" al mismo tiempo.

Una *secuencia* es una serie de acordes, prensados y lanzados en una fila. El comando más importante en Emacs, "C-x C-c", es un gran ejemplo de una secuencia. Al ejecutarla usted está en el proceso de salir de Emacs.

#+begin_quote
Nota de Doom: Emacs tiene una extensión especial llamada modo de maligno que emula una gran cantidad de funcionalidad del editor VI. Doom está fuertemente centrada en el modo malvado, y mucho del resto de este artículo implica el uso de las diversas encuadernaciones clave que se configuran con él. La pieza más grande es el concepto de un líder "evil", que es básicamente una tecla que pulsas como el primer paso en una secuencia que luego abre una nueva rama de posibles comandos. En Doom, el líder malvado está puesto en la Barra Espaciadora por defecto. Así, por ejemplo, para dividir la pantalla en dos ventanas lado a lado, usted presionaría "SPC w v". Mantenga presente este concepto de la clave de líder a medida que pasamos por ejemplos prácticos.
#+end_quote

** Configurando una fuente

En el archivo ~config.el~, se agregan las siguiente líneas

#+begin_src
(setq doom-font (font-spec :family "FiraCode Nerd Font Mono" :size 12 :weight 'semi-light)
    doom-variable-pitch-font (font-spec :family "FiraCode Nerd Font Propo" :size 13))
#+end_src

 Para validar que fuente disponibles encuentra emacs ejecute el comadno ~M-x describe-font~ . El resultado sera una lista con las fuentes. e.g.

#+begin_src
-CTDB-Fira Code-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1
-CTDB-Fira Code-light-normal-normal-*-*-*-*-*-m-0-iso10646-1
-CTDB-Fira Code-medium-normal-normal-*-*-*-*-*-m-0-iso10646-1
-CTDB-Fira Code-regular-normal-normal-*-*-*-*-*-m-0-iso10646-1
-CTDB-Fira Code-semibold-normal-normal-*-*-*-*-*-m-0-iso10646-1
-CTDB-Fira Code-regular-normal-normal-*-10-*-*-*-m-0-fontset-startup
-CTDB-Fira Code Symbol-regular-normal-normal-*-*-*-*-*-*-0-iso10646-1
#+end_src

Para este caso se puede deducir que "Fira Code" es el nombre correcto de la familia de fuentes. Si no hay resultados para la búsqueda de fuentes con el nombre "Fira Code" ó el resultado del comando ~fc-list | grep fira~ es vacío, entonces la fuente no está instalada correctamente.

** Administración de ventanta

* TODO agregar contenido

** Navegación de la estructura de archivos (neotree)

Neotree en un plugin de para emacs inspirado en el NerdTree de vim, para navegar el sistema de archivos en un explorador tipo árbol.

Para habilitar neotree en doom emacs, dentro del archivo ~init.el~ habilitamos el respectivo módulo descomentando la siguiente línea.

#+begin_src lisp
neotree           ; a project drawer, like NERDTree for vim
#+end_src

Para personalizar el uso del módulo, en el archivo ~config.el~, se agregan las siguientes líneas

#+begin_src lisp
;; config.el
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil
        neo-window-position (quote right)))
#+end_src

Revisemos una por una; la instrucción ~after!~ se utiliza para indicar sobre qué módulo se quieren hacer determinadas configuraciones (e.g. neotree). ~setq~ es un comando de lisp para definir un valor de un símbolo asociado a una expresión. En ese orden de ideas, el módulo neotree nos ofrece los siguientes símbolos:

- ~neo-smart-open~: para determinar que cada vez que se abra la ventana de neotree, se encuentre el archivo actual y saltar directamente al nodo.
- ~neo-window-fixed-size~: para determinar si queremos que el tamaño de la ventada de neotree sea de un ancho fijo.
- ~neo-window-position~: para determinar en que posición queremos mostrar la ventana de neotree.

Con los valores definidos en el snippet, se especifica que cada vez que se abra el neotree se muestre la ubicaión del archvio desde donde se mando la instrucción para mostrar el árbol; al abrirse el ancho del panel no sea fijo y por últimp se posiciona el panel a la derecha del usuario.

Para mayor detalles sobre los simbolos personalizables de neotree por favor revisar el proyecto [[https://github.com/jaypei/emacs-neotree/blob/dev/neotree.el][emacs-neotree]] en github.

El paso restante es personalizar la secuencia de emacas para abror neotree. Por preferencia personal todas las funcionalidades de conmutación las asocio al carácter `t` de ~toggle~. Para neotree la combinación que utilizo es ~SPC t n~. Para hacer esta configuración dentro del mismo archivo ~config.el~ agregamos el siguiente contenido:

#+begin_src lisp
;; config.el
(map! :leader
      :desc "Toggle neotree file viewer" "t n" #'neotree-toggle
      :desc "Open directory in neotree" "d n" #'neotree-dir)
#+end_src

** Reiniciar Doom Emacs

Para reiniciar Doom Emacs luego de hacer unas actualizaciones en sus archivos de configuación se puede ejecutar la siguiente secuencia:

#+begin_src
SPC h r r
#+end_src

o si se prefiere usar el navegador de comando podemos ejecutar ~Alt + x~ y buscar el comando:

#+begin_src
M-x doom/reload
#+end_src

** Vease tambien
- [[https://www.youtube.com/watch?v=37H7bD-G7nE][Doom Emacs, What you need to now on day one]] by DistroTube
- [[https://medium.com/urbint-engineering/emacs-doom-for-newbies-1f8038604e3b][Emacs Doom for Newbies]] by Justins DeMaris
- [[https://github.com/raven2cz/emacs][Fishlive's Doom Emacs config]] by raven2cz
