#+TITLE: Plain Text Storage of Passwords
#+DESCRIPTION: Best practice to handle sensitive data
#+AUTHOR: Sergio Ben√≠tez
#+DATE:<2023-09-26 Tue>
#+STARTUP: fold
#+HUGO_BASE_DIR: ~/Development/suabochica-blog/
#+HUGO_SECTION: /post
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

Plaintext storage of passwords refers to the practice of storing passwords exactly as the user entered them without any other security measures in place. This is a common practice, but it is generally considered to be a poor security practice, as it makes it easy for anyone who gains access to the password database to see and use the passwords.

* Description

Whenever an application has to deal with password storage, it is essential to avoid plaintext format and choose the appropriate protection level. The majority of modern languages and frameworks provide built-in functionality to help store passwords safely. However, there are two important concepts to take into account when protecting passwords:

- ~Encryption~: is the process of converting data or information into a scrambled, unreadable form known as ciphertext, using a secret key. It is a two-way function, so the original data can be recovered using the same encryption key.
- ~Hashing~: is the process of converting data or information into a fixed-length string of characters known as a hash value, using a mathematical function known as a hash algorithm. It is a one-way function, so it is not possible to recreate the original data from the hash value.

When dealing with password protection at rest, best practices suggest using the ~hashing~ technique. This way, once the password's hash values are stored, the original data cannot be recreated in case of datastore compromise. Password encryption is only recommended in some edge cases where it is necessary to obtain the original plaintext password.

However, not all hashing techniques are valid to protect passwords. There are two main categories for hashing: Cryptographic hashes and Password hashes, each with its distinct uses and features.

** TODO Add table

** Cryptographic hashes

These types of hashes are considered fast. They are not recommended for password protection because they are not designed to be resistant to attacks that are specifically tailored for cracking passwords. The main issue is that they are too fast, making it possible for an attacker to perform a large number of password guesses in a short amount of time. Additionally, algorithms like MD5 and SHA-1 are vulnerable to collisions where multiple inputs generate the same output, which also makes them unsuitable for password hashing. Below some examples:

- MD5
- SHA-1
- SHA-2
- SHA-3

** Password hashes

Password hashes are intentionally designed to be slow in order to make it more difficult for attackers to crack passwords by brute force or dictionary attacks. As computers and graphics processing units (GPUs) have become faster over time, it has become easier to perform massive brute force attacks against hashes on consumer hardware. This means that a hash can become less secure over time as it becomes easier to crack.

To address this issue, password hashing algorithms often include a "work factor". A work factor can be a single integer or multiple parameters that define the amount of computational effort required to calculate the hash. It can be adjusted to ensure that the hash remains secure despite advances in hardware.

In addition to the work factor, password hashing algorithms also use "constant time" performance to compute the hash of a password. This means that the time it takes to calculate the hash is the same regardless of the length or complexity of the password. Constant time performance is important in password hashing because it prevents attackers from using timing attacks to infer information about the password being hashed. Timing attacks involve measuring the time it takes for the password hashing function to execute and using this information to try to deduce the password or the input data. Below some examples;

- Argon2
- bcrypt
- PBKDF2
- scrypt

* Mitigation Technique

Below we share mitigation techniques against the plain text storage password risk:

** Use password hasing instead of password encryption

As mentioned above, passwords must be protected at rest using a password hashing technique. This way, if the underlying datastore is compromised, the original passwords would not be exposed. If passwords are protected using an encryption technique, if an attacker manages to steal the encryption key and compromise the password datastore, the original passwords would be exposed.

** Choose an appropriate password hashing algorithm

Below is the list of recommended password hashing algorithms:

- ~Argon2~: is the winner of the 2015 Password Hashing Competition. There are three different versions of the algorithm:

  - ~Argon2i~: is optimized for resistance to side-channel attacks.
  - ~Argon2d~: is optimized for resistance to GPU cracking attacks.
  - ~Argon2id~: is a hybrid of the previous two that offers a balance of security and performance. Although it is slower than the other two, it is the recommended one.

- ~bcrypt~: it should be the second choice if Argon2id is not available.
- ~PBKDF2~: is recommended by NIST and has FIPS 140-2 validated implementations. So, it should be the preferred algorithm when these are required.

** Choose an appropriate configuration for Salting, Peppering and Work Factors

~Salting~: a salt is a unique and randomly generated string that is added to each password as part of the hashing process. Modern hashing algorithms such as Argon2id, bcrypt, and PBKDF2 automatically salt the passwords, so no additional steps are required when using them.

~Peppering~: a pepper is a secret added to a password hash like a salt. Unlike a salt, peppers are secret and the same pepper may be reused for many hashed passwords. They must not be stored alongside the hashed password. The purpose of the pepper is to prevent an attacker from being able to crack any of the hashes if they only have access to the database.

~Work Factors~: the work factor is essentially the number of iterations of the hashing algorithm that are performed for each password. The purpose of the work factor is to make calculating the hash more computationally expensive, which in turn reduces the speed and/or increases the cost for which an attacker can attempt to crack the password hash.

- ~Argon2id~: has three different parameters that can be configured to adjust the work factor. (m) minimum memory size, (t) minimum number of iterations, and (p) the degree of parallelism. The following configuration settings represent a base minimum:
  - Option 1: m=37, t=1, p=1
  - Option 2: m=15, t=2, p=1

- ~bcrypt~: the work factor should be as large as verification server performance will allow, with a minimum of 10.
- ~PBKDF2~: the work factor for PBKDF2 is implemented through an iteration count, which should be set differently based on the internal hashing algorithm used:
  - PBKDF2-HMAC-SHA1: 720,000 iterations
  - PBKDF2-HMAC-SHA256: 310,000 iterations
  - PBKDF2-HMAC-SHA512: 120,000 iterations

* Node.js Express

As Express is a minimalist web framework for Node.js, it does not provide built-in support for secure password storage using the recommended algorithms. It is needed to use third-party libraries that provide the required functionality.

As always when using third-party components, it is important to ensure they are up-to-date and the version used does not contain known vulnerabilities.

** Argon2

The library argon2 provides support for Argon2 using the variants Argon2i, Argon2d, or Argon2id (the default).

#+begin_src js
const argon2 = require('argon2');

const hashedPassword = await argon2.hash("examplePassword");
#+end_src

By default, it generates a secure salt value (32 bytes length), so no need for individuals to provide their own value.

If the customization of some options of the Argon2 algorithm is required, they can be passed as a second parameter to the ~hash~ function:

#+begin_src js
const argon2 = require('argon2');

const hashedPassword = await argon2.hash(password, {
    type: argon2.argon2d,
    memoryCost: 2 ** 16,
    hashLength: 50,
});
#+end_src

** bcrypt

The library bcrypt provides support for generating password hashes using the bcrypt algorithm.

The salt can be generated, and then hash the password in different function calls:

#+begin_src js
const bcrypt = require('bcrypt');

const saltRounds = 12;
const salt = bcrypt.genSaltSync(saltRounds);
const hashedPassword = bcrypt.hashSync(password, salt);
#+end_src

Or the salt rounds value can be passed and bcrypt will auto-generate the salt value:

#+begin_src js
const bcrypt = require('bcrypt');

const saltRounds = 12;
const hashedPassword = bcrypt.hashSync(password, saltRounds);
#+end_src

** PBKDF2

For PBKDF2, the built-in module crypto, which provides support for generating password hashes using the PBKDF2 algorithm, can be used.

#+begin_src js
const crypto = require('crypto');

function hashPassword(password) {
    const salt = crypto.randomBytes(16).toString('hex');
    const hash = crypto.pbkdf2Sync(password, salt, 310000, 32, 'sha256');

    return salt + '$' + hash.toString('hex');
}
#+end_src

** Insecure Code Example

This code snippet provides a ~hashPassword~ function that returns the password hash value.

#+begin_src js
const crypto = require('crypto');

async function hashPassword(password) {
    const hash = crypto.createHash('sha256');
    hash.update(password);

    return hash.digest('hex');
}
#+end_src

This example is insecure because it uses a weak method for generating password hashes. The algorithm SHA256 from 'crypto' module, although it is a strong hashing algorithm, is not designed specifically for password hashing.

** Secure Code Example

This code snippet provides a ~hashPassword~ function that returns the password hash value.

#+begin_src js
const argon2 = require('argon2');

async function hashPassword(password) {
    const hash = await argon2.hash(password);

    return hash;
}
#+end_src

This example is secure because it is computing the password hash value using the Argon2 algorithm with a random salt value (which is generated by default). This way, the returned hash value can be safely stored.

-----

* References & Resources

- OWASP Top 10 A02:2021 ‚Äì Cryptographic Failures
- OWASP Cheat Sheet Series - Password Storage

- CWE-256
- CWE-257
- CWE-759
- CWE-760
