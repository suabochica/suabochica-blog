#+TITLE: Introducción a microservicios
#+DESCRIPTION: Aprende como las aplicaciones modernas que estan siempre 
disponibles usan el patrón de diseño de microservicios
#+AUTHOR: Sergio Benítez
#+DATE:<2020-10-29 Thu> 

* La evolución de las aplicaciones

Antes de desarrollar a fondo el concepto de microservicios, debemos estar 
seguros de por que los microservicios están diseñados de cierta forma. Para ello,
vamos a apoyarnos en la interpretación de Adrian Cockcroft, /cloud architect/
en Netflix, sobre la evolución de las aplicaciones.

Adrian comparte su visión sobre el desarrollo de aplicaciones en la última
decada, partiendo de que algunos años atrás era común encontrar
proyectos con mas the 5 millones de lineas de código, en donde el proceso
de *build* tardaba tiempos considerables y el *release* se hacia con poca 
frecuencia.

Lo que empezó a pasar más recientemente fue que ese monolito empezó a
romperse en pequeñas partes de software. Parte de los microservicios es hacer
estos pequeños trozos de software. Este cambio, logra que los tiempos de los
builds pasen de horas a segundos. Por otra parte, dichos builds son empaquetados
en un contenedor cuyo despliegue solo tomara algunos segundos, logrando así que
los realeases se ejecuten con mayor frecuencia.

En definitiva, uno de los objetivos de los microservicios es incrementar la
velocidad de desarrollo.

Imagine un escenario en donde cientos de personas están construyendo una aplicación 
monolito, y una parte del equipo encuentra que algo esta fallando y luego en la 
etapa de pruebas encuentran que dicho fallo está retrasando el release por una 
semana, esto hace que el trabajo de las 99 personas no sea publicado en 
producción en el tiempo esperado. Siguiendo la misma línea, se decide seguir 
adelante con el release y posteriormente en producción se identifica que el 
falló explotó, obligando así el retroceso a una version previa, lo cual en
tiempo se traduce a otra semana más. En conclusion, tener demasiadas personas
contribuyendo a un único gran proyecto, expone el riesgo de que un caso
especifíco bloquée una gran cantidad de trabajo, obligando así a crear puntos
de revisión para coordinar la entrega del trabajo.

Por tanto, quebrar este monolito en microservicios básicamente es liberar al
equipo de trabajo para que se desenvuelvan a su propia velocidad. Uno de los
mayores beneficios ofrecidos por los microservicios es que no es necesario
coordinar la entrega de trabajo. El propósito es dejar que cada uno liberé su
código bajo su propio ciclo. Para ello es necesario que las interfaces sean
estables y que cada pieza de codigo que se despliega es independiente de otra.
No se debe pedir permiso para publicar los cambios, pero si es necesario
comunicar los cambios que van a ser publicados.

Por otra parte, la infraestructura de los microservicios necesita de
automatización para que sea efectiva. Es aquí donde las tareas operacionales
son relevantes. 

* Microservicios

Microservicios es un enfoque de arquitectura para diseñar aplicaciones bajo las
siguientes pautas:

- Desarrollo modular
- Fácil de desplegar
- Escalamiento independiente

Varios de los beneficios del patrón de diseño de los microservicios se ejercen para
cualquier aplición. Los /rapid developments/ y el /continuos delivery/ son algunos
de ellos. Paralelamente, los microservicios ejercen presión sobre los limites de
la mayoria de las herramientas de automatización e infrasestructura. Es esta la 
razón por la cual es necesario el uso de una herramienta avanzada como Kubernetes.

* Configuración
Para entrar al mundo de los microservicios es necesario hacer una configuración
previa sobre una plataforma cloud. Para este caso vamos a utilizar Google Cloud.

En ese orden de ideas es necesario crear una cuenta Google Compute Engine (GCE)
la cual permitirá la creación de  máquinas virtuales, redes y volúmenes de
almacenamiento. GCE también suministra un entorno de computo llamado
[[https://cloud.google.com/shell/docs][Google Cloud Shell]].

Para crear una cuenta en Google Cloud Platform (GCP) es necesario asociar una
tarjeta de crédito. Es importante resaltar que no hay costo de subscripción,
pero si se harán cobros sobre los recursos que se utilicen.

Los pasos a seguir son:
1. Crear un proyecto en GCP
2. Habilitar el Compute Engine API
3. Habilitar el Kubernetes Engine API
4. Configurar el Google Cloud Shell
5. Instalar la versión más reciente de Go 

